library(igraph)
pa1
p1 <- "./../../../data/graphs_integration/borda_sw_004/Controls/CTRL_amore.graphml"
g1 <- read.graph(p1, format="graphml")
g1
V(g)$name
V(g1)$name
V(g1)
V(g1)$area
V(g1)$roiName
matrix(1)
matrix(3,3)
matrix(3,,33)
matrix(3,,3,3)
matrix(row = 3, col = 3)
a <- matrix(nrow = 3, ncol = 3, data = 3)
a
a[,2]
a[,-2]
a[,-(1:2)]
a <- matrix(nrow = 4, ncol = 4, data = 3)
a[,-(1:2)]
a
a[,-(1:2)]
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
pathOut_mem <- "./../../../data/results/borda_sw_004/membership_controls.csv"
specc_dir(pathIn_graphs, pathOut_mem)
pathIn_graphs <- "./../../../data/graphs_integration/borda_sw_004/Controls/"
pathOut_mem <- "./../../../data/results/borda_sw_004/membership_controls.csv"
p <- "./../../../data/graphs_integration/borda_sw_004/Controls/CTRL_barbatoa.graphml"
p
p
read.graph(p, format="graphml")
g <- read.graph(p, format="graphml")
g
g
E(g)$fmri
get.adjacency(graph = g, "fmri")
get.adjacency(graph = g, attr ="fmri")
ugm <- as.undirected(g, "collapse")
MA <- get.adjacency(ugm, attr = "fmri")
?as.undirected
ugm
ugm
MA <- get.adjacency(ugm, attr = "fmri")
g4 <- graph(c(1,2, 3,2,3,4,3,4, 5,4,5,4,
6,7, 7,6,7,8,7,8, 8,7,8,9,8,9,
9,8,9,8,9,9, 10,10,10,10))
g4
(g4)$weight <- seq_len(ecount(g4))
(g4)$weight <- seq_len(ecount(g4))
(g4)$weight <- seq_len(ecount(g4))
g4$weight <- seq_len(ecount(g4))
g4
E(g)$weight
seq_len(ecount(g4))
E(g)$weight
E(g4)$weight
g4$weight <- seq_len(ecount(g4))
E(g4)$weight
(g4)$weight
E(g4)$weight
g4$$weight
g4$weight
w <- seq_len(ecount(g4))
set.edge.attribute(graph = g, name = "weight", index = E(g), value = w)
set.edge.attribute(graph = g4, name = "weight", index = E(g), value = w)
set.edge.attribute(graph = g4, name = "weight", index = E(g4), value = w)
g4 <- graph(c(1,2, 3,2,3,4,3,4, 5,4,5,4,
6,7, 7,6,7,8,7,8, 8,7,8,9,8,9,
9,8,9,8,9,9, 10,10,10,10))
set.edge.attribute(graph = g4, name = "weight", index = E(g4), value = w)
ug4 <- as.undirected(g4, mode="mutual", edge.attr.comb=list(weight=length))
ug4
length
E(ug4)
E(ug4)$weight
ug4 <- as.undirected(g4, mode="mutual", edge.attr.comb=list(weight="mean"))
ug4
ug4 <- as.undirected(g4, mode="mutual", edge.attr.comb=list("sum"))
ug4
g4
g4 <- set.edge.attribute(graph = g4, name = "weight", index = E(g4), value = w)
g4
ug4 <- as.undirected(g4, mode="mutual", edge.attr.comb="sum"
)
ug4
ug4 <- as.undirected(g4, mode="mutual", edge.attr.comb="sum")
ug4 <- as.undirected(g4, mode="collapse", edge.attr.comb="sum")
ug4
E(g)$weight
E(ug4)$weight
get.adjacency(ug4, attr = "weight")
g4 <- set.edge.attribute(graph = g4, name = "a1", index = E(g4), value = w)
ug4 <- as.undirected(g4, mode="collapse", edge.attr.comb="sum")
ug4
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
specc_dir(pathIn_graphs, pathOut_mem)
#' Execution and testing of spectral clust method for community detection problem
#' The test is performed on
#' - Bonferroni corrected t-test-cutted graph
#' - Shortest path + Bonferroni corrected t-test-cutted graph
#' - Shortest path + MST cutted graph
#' To evaluate the result is used a hitmap
#'
#' Author: Alessandro Merola
library(infotheo)
library(kernlab)
library(igraph)
library(gplots)
library(ade4)
library(RColorBrewer)
#' Exception for controlling spectal clust errors
#' @param M, input matrix of spectral clustering
trySpec <- function(M) {
out <- tryCatch({
spc <- specc(M, 10, kernel = "rbfdot")
},
error=function(cond){
return(NULL)
},
warning=function(cond) {
},
finally={
}
)
return(out)
}
#' Perform spectral clustering on all graphs in a specified directory
#' @param pathIn, input directory path
#' @param pathOut, output directory path
#' @param form, format of the graphs to read
#' @param type_weights, weights of the graph to use
#' @param verbose, if TRUE print check are enabled
#' @return  save the results in a csv file where on the first column there are
#'          the index of the vertices, on the second column there are the names
#'          of the corresponding roi regions, and after for each file the result
#'          of the clustering.
specc_dir <- function(pathIn, pathOut, form = "graphml", type_weights = "fmri",
verbose = TRUE) {
# initialization
pathForCommunity = pathOut
listNames <- c("vertices", "names")
k <- 0
patt = paste("*.", form, sep = "") # pattern to match
files <- list.files(path = pathIn) # take all files in pathIn
for(i in 1:length(files)) {
cfile <- paste(pathIn, files[i], sep="")
# check print
if (verbose){
print(cfile)
print(k)
}
k <- k + 1
if (verbose == TRUE) {
print ("Processing")
print (cfile)
}
# read the graph and turn it into a undirected graph
g <- read.graph(cfile, format = form)
ugm <- as.undirected(g, "collapse", edge.attr.comb = "mean")
# get adjacency matrix and turn it into a matrix format
MA <- get.adjacency(ugm, attr = type_weights)
M <- as.matrix(MA)
# append in list names
listNames <- c(listNames, files[i])
# run spectral clust
repeat{
spc <- trySpec(M)
if(!is.null(spc)){
break
}
}
spec_cl = spc@.Data
# the first time attach roi name and index vertex
if(k <= 1) {
names <- V(g)
roiNames <- V(g)$roiNames
outp <- cbind(names, roiNames)
outp <- cbind(outp, spec_cl)
}
# attach only the result
else {
outp <- cbind(outp, spec_cl)
}
}
# save output
colnames(outp) <- listNames
write.csv(outp[,-(1:2)], pathOut, row.names = outp[,1])
}
# --------------------------- Initialization -----------------------------------
pathIn_graphs <- "./../../../data/graphs_integration/borda_sw_004/Controls/"
pathOut_mem <- "./../../../data/results/borda_sw_004/membership_controls.csv"
# --------------------------- Definition ---------------------------------------
specc_dir(pathIn_graphs, pathOut_mem)
specc_dir(pathIn_graphs, pathOut_mem)
debugSource('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/spec_clust.R', echo=TRUE)
listNames
outp
outp[,1]
listNames
outp
dim(outp)
colnames(outp) <- listNames
length(listNames)
listNames
outp[,1]
outp[,2]
outp[,3]
g
V(g)$roiNames
V(g)$roiName
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/spec_clust.R', echo=TRUE)
debugSource('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/spec_clust.R', echo=TRUE)
oup
outp
listNames
debugSource('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/spec_clust.R', echo=TRUE)
outp
View(outp)
View(outp)
write.csv(outp[,-(1:2)], pathOut)
oup[,2]
outp[,2]
debugSource('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/spec_clust.R', echo=TRUE)
View(outp)
View(outp)
write.csv(outp, pathOut)
write.csv(outp, pathOut, row.names = F)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/spec_clust.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source("./../generics/*.R", chdir = T)
source("./../generics/coOccurence.R", chdir = T)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
mem_matrix <- specc_dir(pathIn_graphs, pathOut_mem)
data <- data[,-(1:2)]
m <- mem_matrix[,-(1:2)]
m
mem_matrix
mem_matrix <- specc_dir(pathIn_graphs, pathOut_mem)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
m
View(m)
View(m)
m
as.integer(m)
m1 <- as.integer(m)
dim(m1)
m1 <- data.matrix(m)
m
m1
m1 <- data.matrix(m)
m1
m1 <- data.matrix(m, rownames.force = NULL)
m1
m
colnames(m) <- NULL
m
dim(m)
m <- mem_matrix[,-(1:2)]
m <- as.matrix(m)
dim(m)
colnames(m) <- NULL
m1 <- data.matrix(m, rownames.force = NULL)
m1
View(`m1`)
View(`m1`)
class(m) <-- "numeric"
m
class(m) <- "numeric"
m
View(m)
View(m)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
coOccurrence(m)
occ_m <- coOccurrence(m)
occ_m
dim(occ_m)
?source
?heatmap.2
a = ""
length(a)
a = "1"
length(a)
a = "12"
length(a)
a = "1"
a = ""
a == ""
h <- heatmap.2(t(occ_m), tracecol = F, main = tmain)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
h <- heatmap.2(t(occ_m), tracecol = F, main = "a")
#' driver_controls
#'
#' spectral clustering on borda controls
#'
#' Author: Emanuele Pesce
rm(list = ls())
source("./spec_clust.R", chdir = T)
source("./../generics/coOccurence.R", chdir = T)
# --------------------------- Initialization -----------------------------------
pathIn_graphs <- "./../../../data/graphs_integration/borda_sw_004/Controls/"
pathOut_mem <- "./../../../data/results/borda_sw_004/Controls/membership_controls.csv"
# --------------------------- Definition ---------------------------------------
mem_matrix <- specc_dir(pathIn_graphs, pathOut_mem)
# remove the first two columns (vertices and roiNames values)
m <- mem_matrix[,-(1:2)]
m <- as.matrix(m)
class(m) <- "numeric"
# calculate coOccurence matrix
occ_m <- coOccurrence(m)
h <- heatmap.2(t(occ_m), tracecol = F, main = "a")
h
h
jpeg(filename="s", width = width, height = height)
h
dev.off()
jpeg(filename="s")
h
dev.off()
h <- heatmap.2(t(occ_m), tracecol = F, main = "a")
plot.new() ## clean up device
h
plot.new() ## clean up device
h
grid.newpage()
#' driver_controls
#'
#' spectral clustering on borda controls
#'
#' Author: Emanuele Pesce
rm(list = ls())
source("./spec_clust.R", chdir = T)
source("./../generics/coOccurence.R", chdir = T)
# --------------------------- Initialization -----------------------------------
pathIn_graphs <- "./../../../data/graphs_integration/borda_sw_004/Controls/"
pathOut_mem <- "./../../../data/results/borda_sw_004/Controls/membership_controls.csv"
# --------------------------- Definition ---------------------------------------
mem_matrix <- specc_dir(pathIn_graphs, pathOut_mem)
# remove the first two columns (vertices and roiNames values)
m <- mem_matrix[,-(1:2)]
m <- as.matrix(m)
class(m) <- "numeric"
# calculate coOccurence matrix
occ_m <- coOccurrence(m)
h <- heatmap.2(t(occ_m), tracecol = F, main = "a")
jpeg(filename="s")
h
dev.off()
show(h)
plot(h)
eval(h$call)
jpeg(filename="s")
eval(h$call)
dev.off()
source("./../generics/coOccurence.R", chdir = T)
source('~/.active-rstudio-document', echo=TRUE)
source("./../generics/make_heatmap.R", chdir = T)
makeHeatmap(m, pathOut = pathOut_heat, tmain = tmain)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
cl <- brewer.pal(10,name = "RdYlBu")
cl
?replace
source("./../generics/plot_clust.R")
rm(list = ls())
source("./spec_clust.R", chdir = T)
source("./../generics/coOccurence.R", chdir = T)
source("./../generics/make_heatmap.R", chdir = T)
source("./../generics/plot_clust.R")
# --------------------------- Initialization -----------------------------------
pathIn_graphs <- "./../../../data/graphs_integration/borda_sw_004/Controls/"
pathOut_mem <- "./../../../data/results/spec_clust/borda_sw_004/controls_membership.csv"
pathOut_heat <- "./../../../data/results/spec_clust/borda_sw_004/controls_heatmap.jpeg"
pathOut_graph3D <- "./../../../data/results/spec_clust/borda_sw_004/3d_controls_graph.jpeg"
pathOut_graph2D <- "./../../../data/results/spec_clust/borda_sw_004/2d_controls_graph.jpeg"
tmain = "Heatmap Controls"
# --------------------------- Definition ---------------------------------------
mem_matrix <- specc_dir(pathIn_graphs, pathOut_mem)
# remove the first two columns (vertices and roiNames values)
m <- mem_matrix[,-(1:2)]
m <- as.matrix(m)
class(m) <- "numeric"
# calculate coOccurence matrix
coOc_m<- coOccurrence(m)
# heatmap
H <- makeHeatmap(coOc_m, pathOut = pathOut_heat, tmain = tmain)
rm(list = ls())
source("./spec_clust.R", chdir = T)
source("./../generics/coOccurence.R", chdir = T)
source("./../generics/make_heatmap.R", chdir = T)
source("./../generics/plot_clust.R")
# --------------------------- Initialization -----------------------------------
pathIn_graphs <- "./../../../data/graphs_integration/borda_sw_004/Controls/"
pathOut_mem <- "./../../../data/results/spec_clust/borda_sw_004/membership_controls.csv"
pathOut_heat <- "./../../../data/results/spec_clust/borda_sw_004/heatmap_controls.jpeg"
pathOut_graph3D <- "./../../../data/results/spec_clust/borda_sw_004/graph3d_controls.jpeg"
pathOut_graph2D <- "./../../../data/results/spec_clust/borda_sw_004/graph2d_controls.jpeg"
tmain = "Heatmap Controls"
# --------------------------- Definition ---------------------------------------
mem_matrix <- specc_dir(pathIn_graphs, pathOut_mem)
# remove the first two columns (vertices and roiNames values)
m <- mem_matrix[,-(1:2)]
m <- as.matrix(m)
class(m) <- "numeric"
# calculate coOccurence matrix
coOc_m<- coOccurrence(m)
# heatmap
H <- makeHeatmap(coOc_m, pathOut = pathOut_heat, tmain = tmain)
rm(list = ls())
source("./spec_clust.R", chdir = T)
source("./../generics/coOccurence.R", chdir = T)
source("./../generics/make_heatmap.R", chdir = T)
source("./../generics/plot_clust.R")
# --------------------------- Initialization -----------------------------------
pathIn_graphs <- "./../../../data/graphs_integration/borda_sw_004/Controls/"
pathOut_mem <- "./../../../data/results/spec_clust/borda_sw_004/membership_controls.csv"
pathOut_heat <- "./../../../data/results/spec_clust/borda_sw_004/heatmap_controls.jpeg"
pathOut_graph3D <- "./../../../data/results/spec_clust/borda_sw_004/graph3d_controls.jpeg"
pathOut_graph2D <- "./../../../data/results/spec_clust/borda_sw_004/graph2d_controls.jpeg"
tmain = "Heatmap Controls"
# --------------------------- Definition ---------------------------------------
mem_matrix <- specc_dir(pathIn_graphs, pathOut_mem)
# remove the first two columns (vertices and roiNames values)
m <- mem_matrix[,-(1:2)]
m <- as.matrix(m)
class(m) <- "numeric"
# calculate coOccurence matrix
coOc_m<- coOccurrence(m)
# heatmap
H <- makeHeatmap(coOc_m, pathOut = pathOut_heat, tmain = tmain)
source("./../generics/plot_clust.R")
plot_clust(coOc_m, pathOut_graph2D, pathOut_graph3D)
g <- read.graph(pathIn_exampleGraph, format = "graphml")
pathIn_exampleGraph <- "./../../../data/results/example_graph.graphml"
g <- read.graph(pathIn_exampleGraph, format = "graphml")
plot_clust(coOc_m, g, pathOut_graph2D, pathOut_graph3D)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
plot_clust(coOc_m, nc g, pathOut_graph2D, pathOut_graph3D)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_sla2.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_sla3.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_sla2.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_sla3.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/comm_spectral.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/spec_clust.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/driver_controls.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/borda_sw_dat/driver_controls.R', echo=TRUE)

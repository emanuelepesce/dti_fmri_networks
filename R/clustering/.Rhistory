library(igraph)
pathIn <- "./../../data/graphs_integration/borda_sw_004/Controls/CTRL_amore.graphml"
g <- read.graph(pathIn, format="graphml")
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
r$membership
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
r$membership
?spinglass.community
ugm <- as.undirected(g, "collapse", edge.attr.comb = "mean")
# get adjacency matrix and turn it into a matrix format
MA <- get.adjacency(ugm, attr = type_weights)
M <- as.matrix(MA)
ugm <- as.undirected(g, "collapse", edge.attr.comb = "mean")
MA <- get.adjacency(ugm, attr = "fmri")
M <- as.matrix(MA)
M
install.packages(fpc)
install.packages("fpc")
dbscan(M)
library(fpc)
dbscan(M)
dbscan(M, 0.2)
dbscan(M, 0.4)
a <- dbscan(M, 0.4)
a$cluster
a$eps
a$MinPts
a <- dbscan(M, 0.2)
a$cluster
a <- dbscan(M, 0.1)
a$cluster
M
library(igraph)
pathIn <- "./../../data/graphs_integration/borda_sw_004/Controls/CTRL_amore.graphml"
g <- read.graph(pathIn, format="graphml")
w <- get.edge.attribute(g, name = "fmri", index = E(g))
r <- spinglass.community(graph = g, weights=w, implementation = "neg")
member <- as.vector(membership(info))
member <- as.vector(membership(r))
member

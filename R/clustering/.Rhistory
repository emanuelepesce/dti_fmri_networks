library(igraph)
pathIn <- "./../../data/graphs_integration/borda_sw_004/Controls/CTRL_amore.graphml"
g <- read.graph(pathIn, format="graphml")
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
r$membership
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
r$membership
?spinglass.community
ugm <- as.undirected(g, "collapse", edge.attr.comb = "mean")
# get adjacency matrix and turn it into a matrix format
MA <- get.adjacency(ugm, attr = type_weights)
M <- as.matrix(MA)
ugm <- as.undirected(g, "collapse", edge.attr.comb = "mean")
MA <- get.adjacency(ugm, attr = "fmri")
M <- as.matrix(MA)
M
install.packages(fpc)
install.packages("fpc")
dbscan(M)
library(fpc)
dbscan(M)
dbscan(M, 0.2)
dbscan(M, 0.4)
a <- dbscan(M, 0.4)
a$cluster
a$eps
a$MinPts
a <- dbscan(M, 0.2)
a$cluster
a <- dbscan(M, 0.1)
a$cluster
M
library(igraph)
pathIn <- "./../../data/graphs_integration/borda_sw_004/Controls/CTRL_amore.graphml"
g <- read.graph(pathIn, format="graphml")
w <- get.edge.attribute(g, name = "fmri", index = E(g))
r <- spinglass.community(graph = g, weights=w, implementation = "neg")
member <- as.vector(membership(info))
member <- as.vector(membership(r))
member
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
dens<-dbscan(dist,method="dist")
dens<-dbscan(M, method="dist")
dist()
m = matrix(1)
dist(m)
m = matrix(1,1)
m
dist(m)
?dist
dist <- as.dist(M)
dens<-dbscan(dist, method="dist")
dens<-dbscan(dist, eps = 0.4, method="dist")
dens
dens$cluster
dens<-dbscan(dist, eps = 0.1, method="dist")
dens<-dbscan(dist, eps = 0.1, method="dist")
dens$cluster
dens<-dbscan(dist, eps = 0.01, method="dist")
dens$cluster
dens<-dbscan(dist, eps = 0.000001, method="dist")
dens$cluster
dist
M
dens<-dbscan(dist,MinPts=25,eps=0.43, method="dist")
dens$cluster
dens<-dbscan(dist,MinPts=25,eps=0.9, method="dist")
dens$cluster
dens<-dbscan(dist,MinPts=25,eps=0.1, method="dist")
dens$isseed
dens<-dbscan(dist,eps=0.0000001, method="dist")
dens$cluster
dens<-dbscan(dist,eps=0.00000000001, method="dist")
dens
dens$cluster
install.packages("apcluster")
cl1 <- cbind(rnorm(100,0.2,0.05),rnorm(100,0.8,0.06))
cl2 <- cbind(rnorm(50,0.7,0.08),rnorm(50,0.3,0.05))
x <- rbind(cl1,cl2)
x
apres <- apcluster(negDistMat(r=2), x, details=TRUE)
library(apcluster)
apres <- apcluster(negDistMat(r=2), x, details=TRUE)
apres <- apcluster(negDistMat(r=2), details=TRUE)
(negDistMat(r=2)
)
?negDistMat
negDistMat(r=2)
negDistMat(2)
sim <- expSimMat(x, r=2)
apres <- apcluster(s=sim, q=0.2)
show(apres)
plot(apres, x)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
apres <- apcluster(dist=, q=0.2)
?expSimMat
MA
apres <- apcluster(MA, q=0.2)
apres
apres
membership(apres)
apres
as.negSimDist()
as.negSimDist(M)
a <- negSimDist(M)
a <- negSimDist(M)
a <- negSimDist(MA)
as.distSimDist()
a <- distSimDist(M)
a <- negDistMat(M)
a <- as.negDistMat(M)
a <- negDistMat(M)
M
M
M
apres <- apcluster(M, q=0.2)
apres
a
a <- negDistMat(M)
a
View(a)
View(M)
View(M)
View(a)
MA
N
M
apres <- apclusterK(M, K=10, q=0.2)
apres <- apclusterK(M, K=10)
apres <- apclusterK(M, K=10, includeSim = T)
apres <- apclusterK(M, K=10)
apres <- apclusterK(M, K=10, includeSim = T)
label.propagation.community (graph = g, weights = w)
label.propagation.community(graph = g, weights = w)
leading.eigenvector.community(graph = g, weights = w)
ugm <- as.undirected(g, "collapse", edge.attr.comb = "mean")
leading.eigenvector.community(graph = ugm, weights = w)
wi <- get.edge.attribute(ugm, name = "fmri", index = E(g))
ugm <- as.undirected(g, "collapse", edge.attr.comb = "mean")
leading.eigenvector.community(graph = ugm, weights = wi)
wi <- get.edge.attribute(ugm, name = "fmri", index = E(g))
leading.eigenvector.community(graph = ugm, weights = wi)
ugm <- as.undirected(g, "collapse", edge.attr.comb = "mean")
wi <- get.edge.attribute(ugm, name = "fmri", index = E(g))
leading.eigenvector.community(graph = ugm, weights = wi)
wi <- get.edge.attribute(ugm, name = "fmri", index = E(g))
wi <- get.edge.attribute(ugm, name = "fmri", index = E(ugm))
leading.eigenvector.community(graph = ugm, weights = wi)
apres <- apcluster(M)
apres
apres
M
dist
apres <- apcluster(dist)
a <- dist
apres <- apcluster(a)
a <- simil(a)
a <- as.simil(a)
a <- simil(a)
?simil
library(proxy)
install.packages("proxy")
a <- simil(a)
?similarity
similarity
similarity(g, vids(g))
similarity(g, vids=V(g))
g_sim <- similarity.dice(g)
el <- get.edgelist(g)
E(g)$fmri <- g_sim[el]
g_sim
g_sim[el]
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
?simil
library(proxy)
a <- simil(a)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
a <- as.simil(dist)
a
apres <- apcluster(a)
a
a <- as.simil(a)
apres <- apcluster(a)
negDistMat
?negDistMat
label.propagation.community(graph = g, weights = abs(w))
M
1-M
as.dist(M)
?spec_clust
library(kernlab)
?spec_clust
library(ade4)
library(infotheo)
?spec_clust
?specc
source('~/Tesi/project_integration_intersect_3groups/R/clustering/spectral/borda_sw_dat/driver_all.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
km <- kernelMatrix("rbfdot", M)
library(kernlab)
km <- kernelMatrix("rbfdot", M)
?kernelMatrix
showMethods("specc")
getMethod("specc", "matrix")
as.kernelMatrix(M)
M
M
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
dens
dens$cluster
dens<-dbscan(dist,eps=0.1, method="dist")
dens$cluster
dens<-dbscan(dist,eps=0.1, method="dist")
dens$cluster
label.propagation.community(graph = g, weights = 1-w)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
pam
library(clusters)
library(cluster)
pam(dist, k = 10)
library(cluster)
pam(dist, k = 10)
a <- pam(dist, k = 10)
a$clustering
library(mcl)
library(MCL)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
mcl(MR)
mcl(MR, addLoops = TRUE)
mcl(MR, addLoops = TRUE, expansion = 1)
mcl(MR, addLoops = TRUE, expansion =1.5)
mcl(MR, addLoops = TRUE, expansion =1.5, max.iter = 10000)
library(apcluster)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
negDistMat(M)
negDistMat(M)
a <- negDistMat(M)
a
str(a)
str(M)
str(MR)
a
a
str(a)
MR
mr <- negDistMat(MR)
mr
?similarities
MR
mr <- negDistMat(MR)
mr
mr <- MR
mr
mr <- negDistMat(MR)
mr[1]
mr[2]
mr
dim(mr)
dim(MR)
str(dim)
str(m)
str(mr)
View(mr)
View(mr)
apcluster(MR)
apcluster(MR)
r <- apcluster(MR)
r@netsimAll
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
apcluster(MR)
apcluster(MR)
apcluster(MR)
apcluster(MR)
apcluster(MR)
apcluster(MR)
apcluster(MR)
apcluster(MR)
apcluster(MR)
apcluster(MR)
apclusterK(MR)
apclusterK(MR, K = 10)
MR
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
r
r@it
r@expref
r@netsimLev
r@dpsim
r@p
r@dpsimAll
r@clusters
r@call
r@sim
r@idx
r@sim
r@exemplars
membership(r)
r@l
r@call
r
membership(r)
r@netsim
r@dpsim
r@expref
r@idxAll
r@clusters
mem <- vector(90,0)
mem <- vector(90)
mem <- vector()
?vector
mem <- vector(0, length= 90)
mem <- is.vector(0, length= 90)
mem <- vector(0, length= 90)
mem <- vector(length= 90)
mem
mem <- vector(mode = "numeric", length= 90)
mem
cl <- r@clusters
cl[[1]]
cl
length(cl)
length(cl[[1]])
mem <- vector(mode = "numeric", length= 90)
cl <- r@clusters
for(i in 1:length(cl)){
cl_tmp <- cl[[i]]
for(j in 1:length(cl_tmp)){
mem[cl_tmp[j]] <- i
}
}
mem
r <- apclusterK(MR, K = 10)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
r
r
source('~/Tesi/project_integration_intersect_3groups/R/clustering/try.R', echo=TRUE)
r <- apclusterK(MR, K = 10, maxits = 10000, conits = 10000)
r <- apclusterK(MR, K = 10, maxits = 10000, convits = 10000)
r
r
r1 <- apclusterK(MR, K = 10, maxits = 10000, convits = 10000)
r1
r1
r1
r1
r1
r1 <- apclusterK(MR, K = 10, maxits = 10000, convits = 10000)
MR
r1 <- apclusterK(-MR, K = 10, maxits = 10000, convits = 10000)
negDistMat
negDistMat(M)
a <- negDistMat(M)
a
a
str(a)
a$num
a@num
a$1
negDistMat
as.simpleDist
invisible(r1 <- apclusterK(MR, K = 10, maxits = 10000, convits = 10000))
invisible( apclusterK(MR, K = 10, maxits = 10000, convits = 10000))
capture.output(apclusterK(MR, K = 10, maxits = 10000, convits = 10000) , file='NUL')
capture.output(r3 <- apclusterK(MR, K = 10, maxits = 10000, convits = 10000) , file='NUL')
r3
source('~/.active-rstudio-document', echo=TRUE)
fastgreedy.community(g, weights = 1-w)
uw <- get.edge.attribute(ugm, name = "fmri", index = E(g))
uw <- get.edge.attribute(ugm, name = "fmri", index = E(ugm))
fastgreedy.community(ugm, weights = 1-uw)
leading.eigenvector.community(g, weights = 1-w)
leading.eigenvector.community(ugm, weights = 1-uw)
fanny(MR)
fanny(MR, k = 10)
fanny(MR, k = 10, diss = dist)
fanny(dist, k = 10, diss = dist)
fanny(dist, k = 10, diss = "dist")
fanny(dist, k = 10, diss = T)
fanny(dist, k = 2, diss = T)
fanny(dist, k = 10, diss = T)
fanny(dist, k = 10, diss = T, memb.exp = 2)
fanny(dist, k = 10, diss = T, memb.exp = 1.2)
fanny(dist, k = 10, diss = T, memb.exp = 1.5)
fanny(dist, k = 10, diss = T, memb.exp = 1.4)
fanny(dist, k = 10, diss = T, memb.exp = 1.2)
fanny(dist, k = 10, diss = T, memb.exp = 1.1)
fanny(dist, k = 10, diss = T, memb.exp = 1.2)
fanny(dist, k = 10, diss = T, memb.exp = 1.1)
f <- fanny(dist, k = 10, diss = T)
f$clustering
f
f <- fanny(dist, k = 10, diss = T, memb.exp = 1.1)
f$clustering
array(length=10)
vector(length = 10)
rep(1:4, 2)
rep(1:4)
rep(0)
rep(0, len = 10)
v.name = rep("no_name", len = length(x))
v.name = rep("no_name", len = length(10))
v.name
v.name = rep("no_name", 10)
v.name
pathIn.graph <- "./../../data/graphs_integration/borda_sw_004/Controls/CTRL_amore.graphml"
read.graph <- (pathIn.graph, format = "graphml")
library(igraph)
pathIn.graph <- "./../../data/graphs_integration/borda_sw_004/Controls/CTRL_amore.graphml"
read.graph <- (pathIn.graph, format = "graphml")
pathIn.graph <- "./../../data/graphs_integration/borda_sw_004/Controls/CTRL_amore.graphml"
read.graph(pathIn.graph, format = "graphml")
pathIn.clust <- "./../../data/results/spec_clust/10/borda_sw_004/membership_controls.csv"
read.csv(pathIn.clust)
clust <- read.csv(pathIn.clust)
clust
as.vector(clust)
clust[,1]
clust[1,]
read.table("./membership_controls.csv")
clust <- read.csv(pathIn.clust)
cluster
clust
clust[,]
clust[,1]
clust[,2]
pathIn.clust <- "./membership_controls.csv"
clust <- read.csv(pathIn.clust)
clust
clust[,2]
clust[,1]
clust <- clust[,1]
clust <- read.table(pathIn.clust, row.names = F)
clust <- read.table(pathIn.clust, header = F)
clust
clust
clust <- read.table(pathIn.clust, header = T)
clust
clust[,1]
clust <- read.table(pathIn.clust, row.names = F)
library(igraph)
pathIn.graph <- "./../../data/graphs_integration/borda_sw_004/Controls/CTRL_amore.graphml"
pathIn.clust <- "./membership_controls.csv"
g <- read.graph(pathIn.graph, format = "graphml")
x <- V(g)$cx
y <- V(g)$cy
z <- V(g)$cz
v.name <- V(g)$roiName
clust <- read.csv(pathIn.clust, )
clust <- clust[,1]
source('~/Tesi/project_integration_intersect_3groups/R/clustering/visualization.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/visualization.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/visualization.R', echo=TRUE)
v.name
x
y
z
clust
length(x)
cbind(clust,x)
length(x)
length(clust)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/visualization.R', echo=TRUE)
length(clust)
clust
source('~/Tesi/project_integration_intersect_3groups/R/clustering/visualization.R', echo=TRUE)
a = -1
a[¹]
a[1]
source('~/Tesi/project_integration_intersect_3groups/R/clustering/visualization.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/visualization.R', echo=TRUE)
M
source('~/Tesi/project_integration_intersect_3groups/R/clustering/visualization.R', echo=TRUE)
M
as.matrix(M)
as.numeric(M)
data.frame(x)
data.frame(x, v.name)
source('~/Tesi/project_integration_intersect_3groups/R/clustering/visualization.R', echo=TRUE)
M
MA <- get.adjacency(ugm, attr = "")
ugm <- as.undirected(g, "collapse", edge.attr.comb = "mean")
MA <- get.adjacency(ugm, attr = "")
MA <- get.adjacency(ugm)
MA
MA <- get.adjacency(ugm, sparse = T)
MA7
MA
MA <- get.adjacency(ugm, sparse = F)
MA
write.table(MA, file = "./spec_clust_10.edge", row.names = F, col.names = F, sep = "\t")
source('~/Tesi/project_integration_intersect_3groups/R/clustering/visualization.R', echo=TRUE)
?get.adjacency
MA <- get.adjacency(ugm, sparse = F, weight = "dti", attr = "fmri")
ugm
MA <- get.adjacency(ugm, sparse = F, weight = "dti", attr = "dti")
MA <- get.adjacency(ugm, sparse = F, attr = "dti")
source('~/Tesi/project_integration_intersect_3groups/R/clustering/visualization.R', echo=TRUE)
ugm <- as.undirected(g, "collapse", edge.attr.comb = "mean")
MA <- get.adjacency(ugm, sparse = F, attr = "dti")
MA
get.adjacency(graph = g)
ugm <- as.undirected(g, "collapse", edge.attr.comb = "mean")
MA <- get.adjacency(ugm, sparse = F, attr = "dti")
write.table(MA, file = "./spec_clust_10.edge", row.names = F, col.names = F, sep = "\t")
ugm <- as.undirected(g, "collapse", edge.attr.comb = "mean")
MA <- get.adjacency(ugm, sparse = F, attr = "dti")
write.table(MA, file = "./spec_clust_10.edge", row.names = F, col.names = F, sep = "\t")
source('~/Tesi/project_integration_intersect_3groups/R/clustering/driver_all.R', echo=TRUE)

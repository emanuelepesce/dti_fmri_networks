help(im.convert)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
print(mean(unlist(l_values)))
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
Q
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
listGraphs
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
mask
length(mask)
dim(mask)[1]
mask[1,1]
length(listGraphs)
a <- NULL
a <- (a, 1)
a <- c(a, 1)
a
g <- listGraphs[[1]]
g["V1", "V2"]
b <- c(1,5,10)
mean(b)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
edges_mask
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
mask
mask[1,1]
str(mask)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
mask
vs <- mask[1,1]
vt <- mask[1,2]
g[vs, vt]
g <- listGraphs[[1]]
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
g <- listGraphs[[1]]
vs <- mask[1,1]
vt <- mask[1,2]
g[vs, vt]
vs
vt
g["V1", "V7"]
vs
vt
g["V1", "V11"]
#     for(j in 1:length(listGraphs)){
#       g <- listGraphs[[j]]
#       edge_val <- g[vs, vt]
#
#       if( edge_val > 0){
#         edge_values <- c(edge_values, edge_val)
#       }
#       if(length(edge_values) > 0 ){
#         edges_mask[k] <- mean(edge_values)
#         k <- k + 1
#       }
#     }
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
listGraphs
g <-listGraphs[20]
g[90,86]
g["V90","V86"]
g
g <-listGraphs[[20]
]
g <-listGraphs[[20]]
g
g["V90","V86"]
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
mask
unione <- makeUnion(as.matrix(control_mask), as.matrix(patients_mask))
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
patients_mask
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
mask
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
mask <- read.table(file = pathMask, header=T, sep=",")
mask
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/gen_ttest.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
res = list("mask" = mask, )
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
res = list("mask" = mask, "edges_mean" = edges_mask)
res
res$edges_mask
res
str(res)
res$edges_mean
edges_values
edges_value
edge_values
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
res = list("mask" = mask, "edges_mean" = edges_mask)
res$edges_mean
res = list("mask" = mask, "edges_mean" = edges_mask)
res
edges_values
edge_values
r
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
r$edges_mask
r$edges_mean
r
length(r)
pathMaskC = "./../../../data/toyData/results/2_t_test_mask/union_t_test.csv"
mask <- read.table(file = pathMask, header=T, sep=",")
mask <- as.matrix(mask)
mask <- read.table(file = pathMaskC, header=T, sep=",")
mask <- as.matrix(mask)
mask
length(r)
cbind(mask, r)
a <- cbind(mask, r)
a
a[1,1,]
a[1,1]
a[1,2]
a[1,3]
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
listGraphs
debugSource('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
listGraphs
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
save.image("maskMean.RData")
mask_m
m_edges <- dim(mask:m)[1]
m_edges <- dim(mask_m)[1]
m_edges
createGraphMask <- function(g_example, mask_m){
# inizialize
g <- graph
e_list <- get.edgelist(g)
g_edges <- ecount(g)
m_edges <- dim(mask_m)[1]
# remove all edges from g
for(i in 1:g_edges){
v1 <- e_list[i,1]
v2 <- e_list[i,2]
g[v1, v2] <- FALSE
}
# add weights of edges in the mask
for(i in 1:m_edges) {
v1 <- mask_m[i,1]
v2 <- mask_m[i,2]
w <- mask_m[i,3]
if (is.finite(w)){
if (w <= 0) {
g[v1, v2, attr = "weight"] <- 1e-05
}
else{
g[v1, v2, attr="weight"] <- w
}
}
g[v1, v2, attr="inverse"] <- 1 - w
}
return(g)
}
g_example <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_amore.gml")
g_example <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_amore.gml",
format="gml")
g <- createMaskGraph(g, mask_m)
g <- createMaskGraph(g_example, mask_m)
g <- createGraphMask(g_example, mask_m)
g_example <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_amore.gml",
format="gml")
g <- createGraphMask(g_example, mask_m)
g <- createGraphMask(g_example, mask_m)
createGraphMask <- function(g, mask_m){
# inizialize
e_list <- get.edgelist(g)
g_edges <- ecount(g)
m_edges <- dim(mask_m)[1]
# remove all edges from g
for(i in 1:g_edges){
v1 <- e_list[i,1]
v2 <- e_list[i,2]
g[v1, v2] <- FALSE
}
# add weights of edges in the mask
for(i in 1:m_edges) {
v1 <- mask_m[i,1]
v2 <- mask_m[i,2]
w <- mask_m[i,3]
if (is.finite(w)){
if (w <= 0) {
g[v1, v2, attr = "weight"] <- 1e-05
}
else{
g[v1, v2, attr="weight"] <- w
}
}
g[v1, v2, attr="inverse"] <- 1 - w
}
return(g)
}
g <- createGraphMask(g_example, mask_m)
source('~/Tesi/gitProject/neuroscience/source/R/gen_ttest/maskMean.R', echo=TRUE)
load("./maskMean.RData")
g_example <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_amore.gml",
format="gml")
g <- createGraphMask(g_example, mask_m)
g
E(g)
E(g_example)
g
V(g)
g["V1","V2"]
g["V1","V2", attr="weight"]="1"
g["V1","V2"]
g["V1","V2", attr="weight"]=1
g["V1","V2"]
E(g)$weight
mask_m
mask_m[1,3]
n <- mask_m[1,3]
as.numeric(n)
createGraphMask <- function(g, mask_m){
# inizialize
e_list <- get.edgelist(g)
g_edges <- ecount(g)
m_edges <- dim(mask_m)[1]
# remove all edges from g
for(i in 1:g_edges){
v1 <- e_list[i,1]
v2 <- e_list[i,2]
g[v1, v2] <- FALSE
}
# add weights of edges in the mask
for(i in 1:m_edges) {
v1 <- mask_m[i,1]
v2 <- mask_m[i,2]
w <- as.numeric(floormask_m[i,3])
if (is.finite(w)){
if (w <= 0) {
g[v1, v2, attr = "weight"] <- 1e-05
}
else{
g[v1, v2, attr="weight"] <- w
}
g[v1, v2, attr="inverse"] <- 1 - w
}
}
return(g)
}
g_example <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_amore.gml",
format="gml")
g <- createGraphMask(g_example, mask_m)
g <- createGraphMask(g_example, mask_m)
createGraphMask <- function(g, mask_m){
# inizialize
e_list <- get.edgelist(g)
g_edges <- ecount(g)
m_edges <- dim(mask_m)[1]
# remove all edges from g
for(i in 1:g_edges){
v1 <- e_list[i,1]
v2 <- e_list[i,2]
g[v1, v2] <- FALSE
}
# add weights of edges in the mask
for(i in 1:m_edges) {
v1 <- mask_m[i,1]
v2 <- mask_m[i,2]
w <- as.numeric(mask_m[i,3])
if (is.finite(w)){
if (w <= 0) {
g[v1, v2, attr = "weight"] <- 1e-05
}
else{
g[v1, v2, attr="weight"] <- w
}
g[v1, v2, attr="inverse"] <- 1 - w
}
}
return(g)
}
g_example <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_amore.gml",
format="gml")
g <- createGraphMask(g_example, mask_m)
g
E(g)
E(g)$weight
rm(list=ls())
load("./maskMean.RData")
g_example <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_amore.gml",
format="gml")
g <- createGraphMask(g_example, mask_m)
createGraphMask <- function(g, mask_m){
# inizialize
e_list <- get.edgelist(g)
g_edges <- ecount(g)
m_edges <- dim(mask_m)[1]
# remove all edges from g
for(i in 1:g_edges){
v1 <- e_list[i,1]
v2 <- e_list[i,2]
g[v1, v2] <- FALSE
}
# add weights of edges in the mask
for(i in 1:m_edges) {
v1 <- mask_m[i,1]
v2 <- mask_m[i,2]
w <- as.numeric(mask_m[i,3])
if (is.finite(w)){
if (w <= 0) {
g[v1, v2, attr = "weight"] <- 1e-05
}
else{
g[v1, v2, attr="weight"] <- w
}
g[v1, v2, attr="inverse"] <- 1 - w
}
}
return(g)
}
g_example <- read.graph("./../../../data/toyData/controls/withNoise/CTRL_amore.gml",
format="gml")
g <- createGraphMask(g_example, mask_m)
gToCut <- g
save.image(file="maskMean2.RData")
write.graph(graph = gToCut, file = pathOutMaskG, format = "gml")
pathOutMaskG <- "./../../../data/toyData/results/2_t_test_mask/union_t_test_WEIGHTED.gml"
write.graph(graph = gToCut, filename = pathOutMaskG, format = "gml")
write.graph(graph = gToCut, file = pathOutMaskG, format = "gml")
write.table(unione, file = pathOutMask, col.names = F, row.names = F)
write.table(mask_m, file = pathOutMask, col.names = F, row.names = F)
source("./../pruningEdges.R", chdir = T)
R <- minFlowPruning(gToCut, threshold = 0.05, flow = 0)
R
R$n_util
R$n_residualEdges
R$n_cuttedEdges
R <- minFlowPruning(gToCut, threshold = 0.06, flow = 0)
R$n_residualEdges
R <- minFlowPruning(gToCut, threshold = 0.05, flow = 0)
R$v_util
R$residualGraph
R <- minFlowPruning(gToCut, threshold = 0, flow = 0)
R$v_util
R$residualGraph
RC <- minFlowPruning(gToCut, threshold = 0.05, flow = 0)
RM <- minFlowPruning(gToCut, threshold = 0, flow = 0)
write.graph(graph = RC$residualGraph, file = "./../../../data/toyData/results/2_t_test_mask/mask_tt_test_cutted.gml"
, format = "gml")
write.graph(graph = RC$residualGraph, file = "./../../../data/toyData/results/2_t_test_mask/mask_tt_test_MST.gml"
, format = "gml")
save.image("./maskMean3.RData")
E(RM$residualGraph)
E(RC$residualGraph)
get.edgelist(RC$residualGraph)
write.table(get.edgelist(RC$residualGraph), file = pathOutMask, col.names = F, row.names = F)
write.table(mask_m, file = pathOutMask, col.names = F, row.names = F)
write.table(get.edgelist(RC$residualGraph),file = "./../../../data/toyData/results/2_t_test_mask/mask_tt_test_cutted.csv" ,
col.names = F, row.names = F)
write.table(get.edgelist(RC$residualGraph),file = "./../../../data/toyData/results/2_t_test_mask/mask_tt_test_MST.csv" ,
col.names = F, row.names = F)
a <- get.edgelist(RC$residualGraph)
as.matrix(a)
a
a[1,1]
write.table(as.matrix(get.edgelist(RM$residualGraph)),,file = "./../../../data/toyData/results/2_t_test_mask/mask_tt_test_MST.csv" ,
col.names = F, row.names = F)
write.table(as.matrix(get.edgelist(RC$residualGraph)),
file = "./../../../data/toyData/results/2_t_test_mask/mask_tt_test_cutted.csv" ,
col.names = F, row.names = F)
a <- get.edgelist(RC$residualGraph)
a
a[1,1]
a[1,2]
write.table(as.matrix(get.edgelist(RM$residualGraph)),
file = "./../../../data/toyData/results/2_t_test_mask/mask_tt_test_MST.csv" ,
col.names = F, row.names = F)
write.table(as.matrix(get.edgelist(RC$residualGraph)),
file = "./../../../data/toyData/results/2_t_test_mask/mask_tt_test_cutted.csv" ,
col.names = F, row.names = F)
write.csv(a, "./a")
write.csv(a, "./a.csv")
write.table(a,
file="a.csv" ,
col.names = F, row.names = F)
write.table(a,
file="a.csv" ,
col.names = F, row.names = F, sep=" ")
write.csv(a,
file="a.csv" ,
col.names = F, row.names = F, sep=" ")
write.csv(a,
file="a.csv" ,
col.names = F, row.names = F)
write.csv(a,
file="a.csv")
write.csv(a,
file="a.csv", header=F)
?write.csv
write.csv(a,
file="a.csv", row.names = F)
write.csv(as.matrix(get.edgelist(RC$residualGraph)),
file = "./../../../data/toyData/results/2_t_test_mask/mask_tt_test_cutted.csv" ,row.names = F)
write.csv(as.matrix(get.edgelist(RM$residualGraph)),
file = "./../../../data/toyData/results/2_t_test_mask/mask_tt_test_MST.csv" , row.names = F)
pathIn = "./../../data/graphs_integration/full_connected/Controls/CTRL_amore.graphml"
library(igraph)
read.graph(file = pathIn)
read.graph(file = pathIn, format="graphml")
V(g)$name[1]
g[1,2]
g[1,2]$dti
E(1,2)$dti
V(g)[1]
V(g)$id
g[1,2, attr="dti"]
g <- read.graph(file = pathIn, format="graphml")
g
g[1,2, attr="dti"]
V(g)
V(g)[1]
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
a <- read.graph(file = pathIn, format="graphml")
p <- "./../../data/graphs_integration/full_connected/Controls/CTRL_amore.graphml"
p <- "./../../data/graphs_integration/full_connected/Controls/CTRL_amore.graphml"
read.graph(p, "graphml")
V(g)[1]
g <- read.graph(p, "graphml")
V(g)[1]
V(g)[1]$id
V(g)[1]$id
V(g)[1]$name
V(g)[1]$are
V(g)[1]$area
g
V(g)[1]$name
V(g)[1]$roiNam
V(g)[1]$roiName
V(g)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/t_test_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/t_test_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)

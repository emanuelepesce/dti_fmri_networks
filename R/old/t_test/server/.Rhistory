t_test_edges_cutting
list_graph_s3
load("./lists_graphs.RData")
list_graph_s3
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
# ---- Create a list of graph objects in pathIn
get_list_graphs <- function(pathIn, form="graphml") {
k <- 1
list_graphs <- list()
patt <- paste("*", form, sep = "")
files_names <- list.files(path = pathIn, pattern = patt) # names of graph files in pathIn
for(i in 1:length(files_names)) { # for each file
cfile <- paste(pathIn, files_names[i], sep="") # get complete name (including path)
g <- read.graph(cfile, format = form)          # get the graph
list_graphs[[k]] <- g
k <- k + 1
}
return(list_graphs)
}
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
load("./lists_graphs.RData")
res_sla3 <- t_test_edges_cutting(pathIn_sla3, list_graphs = list_graph_toy)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
debugSource('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
tt
l_dti_values
list_graph_toy
debugSource('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
res_sla3 <- t_test_edges_cutting(pathIn_sla3, list_graphs = list_graph_toy)
rm(list=ls())
#' Perform a T-Test in order to remove noise
#'
#' Authors: Alessandro Merola, Emanuele Pesce
library(igraph)
library(miscTools)
#' Create a mask of edges using t-test and bonferroni correction
#'
#' @param pathIn: directory containing igraph files
#' @param tmu: mu value to use to use t-test
#' @param tr: threshold to use for cutting using p-values
#' @param verbose: if > 0 enable check prints
#' @param form: format of the graph file to read
#'
#' @examples
#' pathIn <-  "./../../data/graphs_integration/full_connected/Controls/"
#' res <- t_test_edges_cutting(pathIn)
#' write.table(res$selected_edges, file = pathOut, sep=",", col.names = F, row.names = F)
t_test_edges_cutting <- function(pathIn, tmu = 0,  tr = 0.05, verbose = 1,
form = "graphml", list_graphs) {
l_pvalues <- list() # list containing p values
list_edges <- matrix(nrow = 0, ncol = 2) # edges list
kp <- 1             # counter for l_pvalues
kr <- 1             # counter for taken edges
# ----  Generate all pairs of vertices (edges)
#       For edge get all dti values of all graphs
#       Computer t-test
n_vertices <- 90
for(i in 1:n_vertices) {
vi <- i                     # fist vertex
for (j in 1:n_vertices) {
vj <- j                   # second vertex
l_dti_values <- list()    #inizialize list of dti values for the edge vi-vj
# Check print
if (verbose > 0) {
print("Egde:")
print(vi)
print(vj)
}
# If the pair is valid
if (vi != vj) {
# For each graph take the dti edge value (vi-vj)
inx <- 1
g <- NULL   # security check
for(k in 1:length(list_graphs)) {
g <- list_graphs[[k]]
if(g[vi, vj, attr = "dti"] >= 0) {
l_dti_values[inx] <- g[vi, vj, attr = "dti"]
inx <- inx + 1
}
}
# Performing the t-test on a single edge
tt <-  try(t.test(unlist(l_dti_values), mu = tmu), silent = TRUE)
if(!is(tt, "try-error")){
l_pvalues[kp] <- tt$p.value
list_edges <- insertRow(list_edges, kp, c(vi,vj))
kp <- kp + 1
}
else{
l_pvalues[kp] <- 1
list_edges <- insertRow(list_edges, kp, c(vi,vj))
kp <- kp + 1
}
}
} # end for j
}# end for i
# apply bonferroni correction
adj <- p.adjust(unlist(l_pvalues), "bonferroni")
# cut evaluating the threshold
toSelect <- which(adj <= tr, arr.ind = T)
selected_edges <- list_edges[toSelect,]
# return
res <- list("adj" = adj, "p_values" = l_pvalues,
"selected_edges" = selected_edges);
return(res)
}
get_list_graphs <- function(pathIn, form="graphml") {
k <- 1
list_graphs <- list()
patt <- paste("*", form, sep = "")
files_names <- list.files(path = pathIn, pattern = patt) # names of graph files in pathIn
for(i in 1:length(files_names)) { # for each file
cfile <- paste(pathIn, files_names[i], sep="") # get complete name (including path)
g <- read.graph(cfile, format = form)          # get the graph
list_graphs[[k]] <- g
k <- k + 1
}
return(list_graphs)
}
list_graph_toy <- get_list_graphs("./../toyData/")
h
res_sla3 <- t_test_edges_cutting(pathIn_sla3, list_graphs = list_graph_toy)
save(list_graph_toy, "toy.RData")
save(list_graph_toy, file = "toy.RData")
rm(list=ls())
#' Perform a T-Test in order to remove noise
#'
#' Authors: Alessandro Merola, Emanuele Pesce
library(igraph)
library(miscTools)
#' Create a mask of edges using t-test and bonferroni correction
#'
#' @param pathIn: directory containing igraph files
#' @param tmu: mu value to use to use t-test
#' @param tr: threshold to use for cutting using p-values
#' @param verbose: if > 0 enable check prints
#' @param form: format of the graph file to read
#'
#' @examples
#' pathIn <-  "./../../data/graphs_integration/full_connected/Controls/"
#' res <- t_test_edges_cutting(pathIn)
#' write.table(res$selected_edges, file = pathOut, sep=",", col.names = F, row.names = F)
t_test_edges_cutting <- function(pathIn, tmu = 0,  tr = 0.05, verbose = 1,
form = "graphml", list_graphs) {
l_pvalues <- list() # list containing p values
list_edges <- matrix(nrow = 0, ncol = 2) # edges list
kp <- 1             # counter for l_pvalues
kr <- 1             # counter for taken edges
# ----  Generate all pairs of vertices (edges)
#       For edge get all dti values of all graphs
#       Computer t-test
n_vertices <- 90
for(i in 1:n_vertices) {
vi <- i                     # fist vertex
for (j in 1:n_vertices) {
vj <- j                   # second vertex
l_dti_values <- list()    #inizialize list of dti values for the edge vi-vj
# Check print
if (verbose > 0) {
print("Egde:")
print(vi)
print(vj)
}
# If the pair is valid
if (vi != vj) {
# For each graph take the dti edge value (vi-vj)
inx <- 1
g <- NULL   # security check
for(k in 1:length(list_graphs)) {
g <- list_graphs[[k]]
if(g[vi, vj, attr = "dti"] >= 0) {
l_dti_values[inx] <- g[vi, vj, attr = "dti"]
inx <- inx + 1
}
}
# Performing the t-test on a single edge
tt <-  try(t.test(unlist(l_dti_values), mu = tmu), silent = TRUE)
if(!is(tt, "try-error")){
l_pvalues[kp] <- tt$p.value
list_edges <- insertRow(list_edges, kp, c(vi,vj))
kp <- kp + 1
}
else{
l_pvalues[kp] <- 1
list_edges <- insertRow(list_edges, kp, c(vi,vj))
kp <- kp + 1
}
}
} # end for j
}# end for i
# apply bonferroni correction
adj <- p.adjust(unlist(l_pvalues), "bonferroni")
# cut evaluating the threshold
toSelect <- which(adj <= tr, arr.ind = T)
selected_edges <- list_edges[toSelect,]
# return
res <- list("adj" = adj, "p_values" = l_pvalues,
"selected_edges" = selected_edges);
return(res)
}
# ---- Create a list of graph objects in pathIn
get_list_graphs <- function(pathIn, form="graphml") {
k <- 1
list_graphs <- list()
patt <- paste("*", form, sep = "")
files_names <- list.files(path = pathIn, pattern = patt) # names of graph files in pathIn
for(i in 1:length(files_names)) { # for each file
cfile <- paste(pathIn, files_names[i], sep="") # get complete name (including path)
g <- read.graph(cfile, format = form)          # get the graph
list_graphs[[k]] <- g
k <- k + 1
}
return(list_graphs)
}
load("./toy.RData")
res_sla3 <- t_test_edges_cutting(pathIn_sla3, list_graphs = list_graph_toy)
rm(list=ls())
#' Perform a T-Test in order to remove noise
#'
#' Authors: Alessandro Merola, Emanuele Pesce
library(igraph)
library(miscTools)
#' Create a mask of edges using t-test and bonferroni correction
#'
#' @param pathIn: directory containing igraph files
#' @param tmu: mu value to use to use t-test
#' @param tr: threshold to use for cutting using p-values
#' @param verbose: if > 0 enable check prints
#' @param form: format of the graph file to read
#'
#' @examples
#' pathIn <-  "./../../data/graphs_integration/full_connected/Controls/"
#' res <- t_test_edges_cutting(pathIn)
#' write.table(res$selected_edges, file = pathOut, sep=",", col.names = F, row.names = F)
t_test_edges_cutting <- function(pathIn, tmu = 0,  tr = 0.05, verbose = 1,
form = "graphml", list_graphs) {
l_pvalues <- list() # list containing p values
list_edges <- matrix(nrow = 0, ncol = 2) # edges list
kp <- 1             # counter for l_pvalues
kr <- 1             # counter for taken edges
# ----  Generate all pairs of vertices (edges)
#       For edge get all dti values of all graphs
#       Computer t-test
n_vertices <- 90
for(i in 1:n_vertices) {
vi <- i                     # fist vertex
for (j in 1:n_vertices) {
vj <- j                   # second vertex
l_dti_values <- list()    #inizialize list of dti values for the edge vi-vj
# Check print
if (verbose > 0) {
print("Egde:")
print(vi)
print(vj)
}
# If the pair is valid
if (vi != vj) {
# For each graph take the dti edge value (vi-vj)
inx <- 1
g <- NULL   # security check
for(k in 1:length(list_graphs)) {
g <- list_graphs[[k]]
if(g[vi, vj, attr = "dti"] >= 0) {
l_dti_values[inx] <- g[vi, vj, attr = "dti"]
inx <- inx + 1
}
}
# Performing the t-test on a single edge
tt <-  try(t.test(unlist(l_dti_values), mu = tmu), silent = TRUE)
if(!is(tt, "try-error")){
l_pvalues[kp] <- tt$p.value
list_edges <- insertRow(list_edges, kp, c(vi,vj))
kp <- kp + 1
}
else{
l_pvalues[kp] <- 1
list_edges <- insertRow(list_edges, kp, c(vi,vj))
kp <- kp + 1
}
}
} # end for j
}# end for i
# apply bonferroni correction
adj <- p.adjust(unlist(l_pvalues), "bonferroni")
# cut evaluating the threshold
toSelect <- which(adj <= tr, arr.ind = T)
selected_edges <- list_edges[toSelect,]
# return
res <- list("adj" = adj, "p_values" = l_pvalues,
"selected_edges" = selected_edges);
return(res)
}
# ---- Create a list of graph objects in pathIn
get_list_graphs <- function(pathIn, form="graphml") {
k <- 1
list_graphs <- list()
patt <- paste("*", form, sep = "")
files_names <- list.files(path = pathIn, pattern = patt) # names of graph files in pathIn
for(i in 1:length(files_names)) { # for each file
cfile <- paste(pathIn, files_names[i], sep="") # get complete name (including path)
g <- read.graph(cfile, format = form)          # get the graph
list_graphs[[k]] <- g
k <- k + 1
}
return(list_graphs)
}
load("./lists_graphs.RData")
res_sla3 <- t_test_edges_cutting(pathIn_sla3, list_graphs = list_graph_s3)
list_dti_values
tt
mu
t,u
tmu
list_graph_s3
res_sla3 <- t_test_edges_cutting(pathIn_sla3, list_graphs = list_graph_s3)
tt
tt
debugSource('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
debugSource('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
debugSource('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
vi = 1
vj = 4
((vi == 78) && (vj==28))
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
#' Perform a T-Test in order to remove noise
#'
#' Authors: Alessandro Merola, Emanuele Pesce
library(igraph)
library(miscTools)
#' Create a mask of edges using t-test and bonferroni correction
#'
#' @param pathIn: directory containing igraph files
#' @param tmu: mu value to use to use t-test
#' @param tr: threshold to use for cutting using p-values
#' @param verbose: if > 0 enable check prints
#' @param form: format of the graph file to read
#'
#' @examples
#' pathIn <-  "./../../data/graphs_integration/full_connected/Controls/"
#' res <- t_test_edges_cutting(pathIn)
#' write.table(res$selected_edges, file = pathOut, sep=",", col.names = F, row.names = F)
t_test_edges_cutting <- function(pathIn, tmu = 0,  tr = 0.05, verbose = 1,
form = "graphml", list_graphs) {
l_pvalues <- list() # list containing p values
list_edges <- matrix(nrow = 0, ncol = 2) # edges list
kp <- 1             # counter for l_pvalues
kr <- 1             # counter for taken edges
# ----  Generate all pairs of vertices (edges)
#       For edge get all dti values of all graphs
#       Computer t-test
n_vertices <- 90
for(i in 1:n_vertices) {
vi <- i                     # fist vertex
for (j in 1:n_vertices) {
vj <- j                   # second vertex
l_dti_values <- list()    #inizialize list of dti values for the edge vi-vj
if((vi == 78) && (vj==28)){
# Check print
if (verbose > 0) {
print("Egde:")
print(vi)
print(vj)
}
# If the pair is valid
if (vi != vj) {
# For each graph take the dti edge value (vi-vj)
inx <- 1
g <- NULL   # security check
for(k in 1:length(list_graphs)) {
g <- list_graphs[[k]]
if(g[vi, vj, attr = "dti"] >= 0) {
l_dti_values[inx] <- g[vi, vj, attr = "dti"]
inx <- inx + 1
}
}
# Performing the t-test on a single edge
tt <-  try(t.test(unlist(l_dti_values), mu = tmu), silent = TRUE)
if(!is(tt, "try-error")){
l_pvalues[kp] <- tt$p.value
list_edges <- insertRow(list_edges, kp, c(vi,vj))
kp <- kp + 1
}
else{
l_pvalues[kp] <- 1
list_edges <- insertRow(list_edges, kp, c(vi,vj))
kp <- kp + 1
}
}
}
} # end for j
}# end for i
# apply bonferroni correction
adj <- p.adjust(unlist(l_pvalues), "bonferroni")
# cut evaluating the threshold
toSelect <- which(adj <= tr, arr.ind = T)
selected_edges <- list_edges[toSelect,]
# return
res <- list("adj" = adj, "p_values" = l_pvalues,
"selected_edges" = selected_edges);
return(res)
}
# ---- Create a list of graph objects in pathIn
get_list_graphs <- function(pathIn, form="graphml") {
k <- 1
list_graphs <- list()
patt <- paste("*", form, sep = "")
files_names <- list.files(path = pathIn, pattern = patt) # names of graph files in pathIn
for(i in 1:length(files_names)) { # for each file
cfile <- paste(pathIn, files_names[i], sep="") # get complete name (including path)
g <- read.graph(cfile, format = form)          # get the graph
list_graphs[[k]] <- g
k <- k + 1
}
return(list_graphs)
}
load("./lists_graphs.RData")
res_sla3 <- t_test_edges_cutting(pathIn_sla3, list_graphs = list_graph_s3)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
t_test_edges_cutting
t_test_edges_cutting <- function(pathIn, tmu = 0,  tr = 0.05, verbose = 1,
form = "graphml", list_graphs) {
l_pvalues <- list() # list containing p values
list_edges <- matrix(nrow = 0, ncol = 2) # edges list
kp <- 1             # counter for l_pvalues
kr <- 1             # counter for taken edges
# ----  Generate all pairs of vertices (edges)
#       For edge get all dti values of all graphs
#       Computer t-test
n_vertices <- 90
for(i in 1:n_vertices) {
vi <- i                     # fist vertex
for (j in 1:n_vertices) {
vj <- j                   # second vertex
l_dti_values <- list()    #inizialize list of dti values for the edge vi-vj
if((vi == 78) && (vj==28)){
# Check print
if (verbose > 0) {
print("Egdeooo:")
print(vi)
print(vj)
}
# If the pair is valid
if (vi != vj) {
# For each graph take the dti edge value (vi-vj)
inx <- 1
g <- NULL   # security check
for(k in 1:length(list_graphs)) {
g <- list_graphs[[k]]
if(g[vi, vj, attr = "dti"] >= 0) {
l_dti_values[inx] <- g[vi, vj, attr = "dti"]
inx <- inx + 1
}
}
# Performing the t-test on a single edge
tt <-  try(t.test(unlist(l_dti_values), mu = tmu), silent = TRUE)
if(!is(tt, "try-error")){
l_pvalues[kp] <- tt$p.value
list_edges <- insertRow(list_edges, kp, c(vi,vj))
kp <- kp + 1
}
else{
l_pvalues[kp] <- 1
list_edges <- insertRow(list_edges, kp, c(vi,vj))
kp <- kp + 1
}
}
}
} # end for j
}# end for i
# apply bonferroni correction
adj <- p.adjust(unlist(l_pvalues), "bonferroni")
# cut evaluating the threshold
toSelect <- which(adj <= tr, arr.ind = T)
selected_edges <- list_edges[toSelect,]
# return
res <- list("adj" = adj, "p_values" = l_pvalues,
"selected_edges" = selected_edges);
return(res)
}
res_sla3 <- t_test_edges_cutting(pathIn_sla3, list_graphs = list_graph_s3)
debugSource('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
debugSource('~/Tesi/project_integration_intersect_3groups/R/t_test/server/t_test_mask.R', echo=TRUE)
tt
l_dti_values
vi
vk
vj
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/driver_create_ttest_mask.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
res_sla3 <- t_test_edges_cutting1(pathIn_sla3, list_graphs = list_graph_s3)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/driver_create_ttest_mask.R', echo=TRUE)
list_graph_c <- get_list_graphs(pathIn_controls)
list_graph_s2 <- get_list_graphs(pathIn_sla2)
list_graph_s3 <- get_list_graphs(pathIn_sla3)
save.image("lists_graphs.RData")
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/driver_create_ttest_mask.R', echo=TRUE)
list_graph_c <- get_list_graphs(pathIn_controls)
list_graph_s2 <- get_list_graphs(pathIn_sla2)
list_graph_s3 <- get_list_graphs(pathIn_sla3)
save.image("lists_graphs.RData")
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/server/driver_create_ttest_mask.R', echo=TRUE)
res_sla3
save(res_sla3, file = "res_sla3.RData")

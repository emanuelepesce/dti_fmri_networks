ul <- unlist(list_dti)
ul
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
tt <- try(t.test(), silent = TRUE)
if(!is(tt, "try-error")){
print("WEEEEE")
}
source('~/.active-rstudio-document', echo=TRUE)
tt <- try(t.test(), silent = TRUE)
if(!is(tt, "try-error")){
tt
(!is(tt, "try-error"))
tt
t
tt
(is(tt, "try-error"))
(is(tt, "try-error")==FALSE)
(is(tt, "try-error")==TRUE)
(is(tt, "try-error")==FALSE)
(!is(tt, "try-error"))
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
(!is(tt, "try-error"))
tt
tt <- try(t.test(ul, mu=0), silent = TRUE)
if(!is(tt, "try-error")){
print("WEEEEE")
}
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/t_test_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
r
debugSource('~/Tesi/project_integration_intersect_3groups/R/t_test/t_test_mask.R', echo=TRUE)
l_pvalues
toSelect <- which(adj <= tr, arr.ind = T)
adj <- p.adjust(unlist(l_pvalues), "bonferroni")
toSelect <- which(adj <= tr, arr.ind = T)
selected_edges <- list_edges[toSelect,]
toSelect
toSelect <- which(adj <= tr, arr.ind = T)
which(adj <= tr, arr.ind = T)
which(adj <= 1, arr.ind = T)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
list_edges
selected_edges
res_sla3
res_sla3 <- t_test_edges_cutting(pathIn_sla3)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
load("./server/res_1/res_controls.RData")
load("./server/res_1/res_sla2.RData")
load("./server/res_1/res_sla3.RData")
res_controls$selected_edges
res_controls$p_values
res_sla2$selected_edges
edges_c[1,1]
edges_c <- res_controls$selected_edges
edges_s2 <- res_sla2$selected_edges
edges_s3 <- res_sla3$selected_edges
edges_c[1,1]
edges_c[1,2]
edges_c[1,3]
length(edges_s2)
dim(edges_s2)[1]
edges[2703,]
edges_s2[2703,]
a = edges_s2[2703,]
a %in% edges_c
o <- a %in% edges_c
o
o == TRUE
is(o, TRUE)
o == TRUE
o == FALSE
all(o == TRUE)
all(o == FALSE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/consensus_masks.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/consensus_masks.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/consensus_masks.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/consensus_masks.R', echo=TRUE)
edges_c
a = edges_c[1,]
a
a[1]
a[2]
source('~/Tesi/project_integration_intersect_3groups/R/t_test/consensus_masks.R', echo=TRUE)
list_consensus
consensus
edge
edges_c
a = c(1,1)
a
a %in% edges_c
edges_c
a %in% edges_c
a %in% edges_c[i,]
a %in% edges_c[1,]
a in edges_c[i,]
a %in% edges_c[i,]
a %in% edges_c
which(a %in% edges_c)
mine <- 1:6
table.combos <- matrix(data = 1:12, nrow = 10, ncol = 6, byrow)
row.is.a.match <- apply(table.combos, 1, identical, mine)
match.idx <- which(row.is.a.match)
total.matches <- sum(row.is.a.match)
mine <- 1:6
table.combos <- matrix(data = 1:12, nrow = 10, ncol = 6, byrow=T)
row.is.a.match <- apply(table.combos, 1, identical, mine)
match.idx <- which(row.is.a.match)
total.matches <- sum(row.is.a.match)
tables.combos
table.combos
row.is.a.match
match.idx
edge.match <- apply(edges_c, 1, identical, edge)
edge.match
match.idx <- which(edge.match)
match.idx
length(match)
edges_c
edge <- c(90,86)
edge.match <- apply(edges_c, 1, identical, edge)
match.idx <- which(edge.match)
match.idx
edge
edge.match <- apply(edges_c, 1, identical, edge)
edge.match
edge_c
edges_c
edge.match
edge.match
egdes_c
edges_c
edges_c[614,1]
source('~/Tesi/project_integration_intersect_3groups/R/t_test/consensus_masks.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/consensus_masks.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/consensus_masks.R', echo=TRUE)
list_consensus
edges_c
edges_s2
edges_s3
source('~/Tesi/project_integration_intersect_3groups/R/t_test/consensus_masks.R', echo=TRUE)
list_consensus
#'  Driver for creating ttest mask
#'
#'  Cut edges using t_test and bonferroni correction.
#'  Create a mask for each dataset (controls, sla2, sla3)
#'  Unify masks.
rm(list = ls())
source("./t_test_mask.R", chdir = T)
library(igraph)
# ------------------------ Initialization --------------------------------------
pathIn_controls <- "./../../data/graphs_integration/full_connected/Controls/"
pathIn_sla2 <- "./../../data/graphs_integration/full_connected/SLA2/"
pathIn_sla3 <- "./../../data/graphs_integration/full_connected/SLA3/"
tmu = 0
threshold = 0.05
res_sla2 <- t_test_edges_cutting(pathIn_sla2, tr = 0.01 )
res_sla2
save(res_sla2, file = "res_sla2.RData")
res_controls <- t_test_edges_cutting1(pathIn_controls, list_graphs = list_graph_c)
save(res_controls, file = "res_controls.RData")
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_create_ttest_mask.R', echo=TRUE)
res_sla3
save(res_sla3, file = "res_sla3_t001.RData")
load("res_sla2.RData")
res_sla2
res_controls <- t_test_edges_cutting(pathIn_controls, tr = threshold)
save(res_sla3, file = "res_controls_t001.RData")
res_controls
load("./server/res_2_t005/")
load("./server/res_2_t005/res_controls.RData")
res_controls
source('~/Tesi/project_integration_intersect_3groups/R/t_test/unionMasks.R', echo=TRUE)
res_controls
res_sla2
mask_c <- res_controls$selected_edges
load(path_mask_c)
load(path_mask_s2)
load(path_mask_s3)
# get masks
mask_c <- res_controls$selected_edges
mask_s2 <- res_sla2$selected_edges
mask_s3 <- res_sla3$selected_edges
mask <- unionMask(mask_c, mask_s2)
mask <- rbind(mask_c, mask_s2)
MASK
mask
mask <- rbind(mask_c, mask_s2, mask_s3)
mask
mask_c <- res_controls$selected_edges
masck_c
mask_c
mask_sla2
mask_s2
mask_s3
mask <- rbind(mask_c, mask_s2, mask_s3)
mask <- unique(mask)
mask
write.table(mask,file= pathOut_mask, sep="\t", col.names = F, row.names = F)
pathOut_mask <- "./../../data/other/t_test_005/mask_ttest_005.csv"
pathOut_mask <- "./../../data/other/t_test_005/mask_ttest_005.csv"
write.table(mask,file= pathOut_mask, sep="\t", col.names = F, row.names = F)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/unionMasks.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_maskMean.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/maskMean.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_maskMean.R', echo=TRUE)
maskMean(pathInC, pathInS2, pathInS3, pathInMask)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_maskMean.R', echo=TRUE)
mask <- read.table(file = pathMask, header=T, sep=",")
mask <- read.table(file = pathInMask, header=T, sep=",")
mask
mask <- read.table(file = pathInMask, header=T, sep="\t")
mask
mask <- read.table(file = pathInMask, header=F, sep="\t")
mask
mask <- read.csv(file = pathInMask, header=F, sep="\t")
mask
mask <- read.csv(file = pathInMask)
mask
mask <- read.csv(file = pathInMask, sep= "\t")
mask
mask <- read.csv(file = pathInMask, header=F,sep= "\t")
mask
mask[1]
mask[1,]
mask[1,1]
mask[1,2]
mask <- as.matrix(mask)
mask
mask <- read.csv(file = pathInMask, header=F,sep= "\t")
mask <- as.matrix(mask)
mask
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_maskMean.R', echo=TRUE)
ans
ans()
.Last.value
.Last.value$value
res <- .Last.value$value
res
res <- .Last.value$value
res
res <- .Last.value$value
.Last.value$value
res <- .Last.value
res
.Last.value
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_maskMean.R', echo=TRUE)
write.table(mask, file = pathOutMask, col.names = F, row.names = F)
pathOutMask <- pate(pathOut, "weighted_mask.csv")
write.table(mask, file = pathOutMask, col.names = F, row.names = F)
pathOutMask <- pate(pathOut, "weighted_mask.csv")
pathOutMask <- paste(pathOut, "weighted_mask.csv")
write.table(mask, file = pathOutMask, col.names = F, row.names = F)
write.table(mask,file= pathOutMask, sep="\t", col.names = F, row.names = F)
g_example <- read.graph("./../../data/graphs_integration/full_connected/Controls/CTRL_amore.graphml",
format="graphml")
g_example
get.edgelist(g_example)
set.edge.attribute(g, name = "weight", index = E(g), value = "")
g <- g_example
set.edge.attribute(g, name = "weight", index = E(g), value = "")
gToCut <- createGraphMask(g_example, mask_m)
gToCut <- createGraphMask(g_example, mask)
write.graph(graph = gToCut, file = pathOutMaskG, format = "graphml")
pathOut_graphToCut<- paste(pathOut, "graph_to-cut.graphml")
write.graph(graph = gToCut, file = pathOut_graphToCut, format = "graphml")
source("./../strong_weak_ties_cutting/sw_cutting.R")
RC <- sw_cutting(toToCut, threshold = 0.04, invert = T)
RC <- sw_cutting(gToToCut, threshold = 0.04, invert = T)
RC <- sw_cutting(gToToCut, threshold = 0.04, invert = T)
RC <- sw_cutting(gToToCut, threshold = 0.04, invert = T)
RC <- sw_cutting(gToCut, threshold = 0.04, invert = T)
g
gToCut <- createGraphMask(g_example, mask)
gToCut <- createGraphMask(g_example, mask)
write.graph(graph = gToCut, file = pathOut_graphToCut, format = "graphml")
RC <- sw_cutting(gToCut, threshold = 0.04, invert = T)
gToCut
g <- read.graph("./../../data/graphs_integration/full_connected/Controls/CTRL_amore.graphml")
g <- read.graph("./../../data/graphs_integration/full_connected/Controls/CTRL_amore.graphml", format="graphml")
g
E(g)$weight
gToCut <- createGraphMask(g_example, mask)
write.graph(graph = gToCut, file = pathOut_graphToCut, format = "graphml")
RC <- sw_cutting(gToCut, threshold = 0.04, invert = T)
gToCut
E(gToCut)
E(gToCut)$weight
E(gToCut)$inverse
E(gToCut)$weight
E(gToCut)$inverse
E(gToCut)$weight
RC <- sw_cutting(gToCut, threshold = 0.04, invert = F)
source("./not_used/pruningEdges.R")
source("./not_used/pruningEdges.R")
source("./not_used/pruningEdges.R")
source("./not_used/pruningEdges.R")
source("./not_used/pruningEdges.R")
source("./maskMean.R") #union mask function
source("./../strong_weak_ties_cutting/sw_cutting.R")
source("./../utils/graphUtils.R")
source("./not_used/pruningEdges.R")
rm(list=ls())
source("./maskMean.R") #union mask function
source("./../strong_weak_ties_cutting/sw_cutting.R")
source("./../utils/graphUtils.R")
source("./not_used/pruningEdges.R")
rm(list=ls())
source("./maskMean.R") #union mask function
source("./maskMean.R") #union mask function
source("./../strong_weak_ties_cutting/sw_cutting.R")
source("./../utils/graphUtils.R")
source("./not_used/pruningEdges.R")
pathInC <- "./../../data/graphs_integration/full_connected/Controls/"
pathInS2 <- "./../../data/graphs_integration/full_connected/Controls/"
pathInS3 <- "./../../data/graphs_integration/full_connected/Controls/"
pathInMask <- "./../../data/other/t_test_005/mask_ttest_005.csv"
pathOut <- "./../../data/other/t_test_005/"
pathOutMask <- paste(pathOut, "weighted_mask.csv")
pathOut_graphToCut<- paste(pathOut, "graph_to-cut.graphml")
read.graph(pathOut_graphToCut, format="graphml")
RC <- sw_cutting(gToCut, threshold = 0.04, invert = F)
gToCut <- read.graph(pathOut_graphToCut, format="graphml")
RC <- sw_cutting(gToCut, threshold = 0.04, invert = F)
g
gToCut
mask
source("./not_used/pruningEdges.R")
RC <- minFlowPruning(gToCut, threshold = 0.04, invert = F)
rm(list=ls())
source("./maskMean.R") #union mask function
source("./../strong_weak_ties_cutting/sw_cutting.R")
g_example <- read.graph("./example.gml", format="gml")
gToCut <- createGraphMask(g_example, mask)
pathInC <- "./../../data/graphs_integration/full_connected/Controls/"
pathInS2 <- "./../../data/graphs_integration/full_connected/Controls/"
pathInS3 <- "./../../data/graphs_integration/full_connected/Controls/"
pathInMask <- "./../../data/other/t_test_005/mask_ttest_005.csv"
pathOut <- "./../../data/other/t_test_005/"
pathOutMask <- paste(pathOut, "weighted_mask.csv")
pathOut_graphToCut<- paste(pathOut, "graph_to-cut.graphml")
read.graph(pathOutMask, format="graphml")
read.table(pathOutMask, sep="\t")
mask <- read.table(file = pathOutMask, header=T, sep=",")
mask <- as.matrix(mask)
mask
mask <- read.table(file = pathOutMask, header=T, sep="\t")
mask <- as.matrix(mask)
mask
write.graph(graph = gToCut, file = pathOut_graphToCut, format = "graphml")
gToCut <- createGraphMask(g_example, mask)
gToCut
RC <- minFlowPruning(gToCut, threshold = 0.04, invert = F)
RC <- sw_cutting(gToCut, threshold = 0.04, invert = F)
RC <- sw_cutting(gToCut, threshold = 0.04, invert = T)
pathOut_residualGraph <- paste(pathOut, "residualgraph_cutted.graphml", sep="")
pathOut_mask_ttest <- paste(pathOut, "mask_ttest.csv", sep ="")
write.graph(graph = RC$residualGraph, file = pathOut_residualGraph, format = "graphml")
write.csv(as.matrix(get.edgelist(RC$residualGraph)),
file = pathOut_mask_ttest ,row.names = F)
write.graph(graph = RC$residualGraph, file = pathOut_residualGraph, format = "graphml")
write.csv(as.matrix(get.edgelist(RC$residualGraph)),
file = pathOut_mask_ttest ,row.names = F)
num_mask <- as.matrix(get.edgelist(RC$residualGraph))
num_mask
char_mask <- as.matrix(get.edgelist(RC$residualGraph))
# create a numeric mask (without "V" in cells)
new_mask <- matrix(nrow = dim(char_mask)[1], ncol = 2)
for(i in 1:dim(maskU)[1]){
tmp <- gsub("V","", char_mask[i, 1])
new_mask[i,1] <- as.integer(tmp)
tmp <- gsub("V","", char_mask[i, 2])
new_mask[i,2] <- as.integer(tmp)
}
char_mask <- as.matrix(get.edgelist(RC$residualGraph))
# create a numeric mask (without "V" in cells)
new_mask <- matrix(nrow = dim(char_mask)[1], ncol = 2)
for(i in 1:dim(char_mask)[1]){
tmp <- gsub("V","", char_mask[i, 1])
new_mask[i,1] <- as.integer(tmp)
tmp <- gsub("V","", char_mask[i, 2])
new_mask[i,2] <- as.integer(tmp)
}
new_mask
pathOut_mask_ttest_num <- paste(pathOut, "mask_ttest_num.csv", sep ="")
write.table(new_mask,file= pathOut_mask_ttest_num, sep="\t", col.names = F, row.names = F)
pathOut_mask_ttest <- paste(pathOut, "mask_ttest_cutted.csv", sep ="")
pathOut_mask_ttest_num <- paste(pathOut, "mask_ttest_cutted.csv", sep ="")
write.graph(graph = RC$residualGraph, file = pathOut_residualGraph, format = "graphml")
write.csv(as.matrix(get.edgelist(RC$residualGraph)),
file = pathOut_mask_ttest ,row.names = F)
char_mask <- as.matrix(get.edgelist(RC$residualGraph))
# create a numeric mask (without "V" in cells)
new_mask <- matrix(nrow = dim(char_mask)[1], ncol = 2)
for(i in 1:dim(char_mask)[1]){
tmp <- gsub("V","", char_mask[i, 1])
new_mask[i,1] <- as.integer(tmp)
tmp <- gsub("V","", char_mask[i, 2])
new_mask[i,2] <- as.integer(tmp)
}
write.table(new_mask,file= pathOut_mask_ttest_num, sep="\t", col.names = F, row.names = F)
RC$residualGraph
RC <- sw_cutting(gToCut, threshold = 0.05, invert = T)
RC$residualGraph
RC <- sw_cutting(gToCut, threshold = 0.1, invert = T)
RC$residualGraph
RC <- sw_cutting(gToCut, threshold = 0.8, invert = T)
RC$residualGraph
RC <- sw_cutting(gToCut, threshold = 0.01, invert = T)
RC
RC
RC$residualGraph
RC <- sw_cutting(gToCut, threshold = 0.001, invert = T)
RC$residualGraph
E(gToCut)$weight
E(gToCut)$inverse
RC <- sw_cutting(gToCut, threshold = 0.0001, invert = T)
RC$residualGraph
RC <- sw_cutting(gToCut, threshold = 0.00001, invert = T)
RC$residualGraph
RC <- sw_cutting(gToCut, threshold = 0.000001, invert = T)
RC$residualGraph
RC
RC <- sw_cutting(gToCut, threshold = 0.00000001, invert = T)
RC$residualGraph
RC$v_strong
RC$n_strong
g < -RC$residualGraph
g <- RC$residualGraph
E(g)
E(g)$weight
E(g)$weight
gToCut
gToCut$weight
gToCut
E(gToCut)$weight
E(g)$weight
gToCut
E(gToCut)$weight
gToCut
E(gToCut)$weight
RC <- sw_cutting(gToCut, threshold = 0.1, invert = F)
E(gToCut)$weight
RC$residualGraph
RC <- sw_cutting(gToCut, threshold = 0.01, invert = F)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_maskMean.R', echo=TRUE)
RC$residualGraph
source("./not_used/pruningEdges.R")
source("./../strong_weak_ties_cutting/sw_cutting.R")
RC <- sw_cutting(gToCut, threshold = 0.001, invert = T)
RC$residualGraph
gToCut$weight
gToCut
RC <- sw_cutting(gToCut, threshold = 0.00001, invert = T)
RC$residualGraph
E(gToCut)$weight
v1 <- E(gToCut)$weight
v1
v2 = v1
v2 = 1-v1
v2
g <- gToCut
g
E(g)$weight
E(g)$weight = v2
E(g)$weight
RC <- sw_cutting(gToCut, threshold = 0.00000001, invert = T)
RC$residualGraph
g
E(g)
E(g)$weight
RC <- sw_cutting(g, threshold = 0.01, invert = F)
RC$residualGraph
RC$v_strong
RC$n_strong
g
source("./../exp_threshold_borda_dataset/threshold_masks/thresholds_vertices.R")
source("./../exp_threshold_borda_dataset/threshold_masks/thresholds_vertices.R", chdir = T)
thresholds_vertices(g)
write.graph("g.graphml", format = "graphml")
write.graph(g, "g.graphml", format = "graphml")
minimum.spanning.tree(g, weights = g$weight)
a <- minimum.spanning.tree(g, weights = g$weight)
E(a)
a <- minimum.spanning.tree(g, weights = g$weight)
a
get.all.shortest.paths(g, from = 1, to=V(graph), mode="out", weights=E(g)$weight)
get.all.shortest.paths(g, from = 1, to=V(g), mode="out", weights=E(g)$weight)
get.all.shortest.paths(g, from = 2, to=V(g), mode="out", weights=E(g)$weight)
get.all.shortest.paths(3, from = 2, to=V(g), mode="out", weights=E(g)$weight)
get.all.shortest.paths(g, from = 3, to=V(g), mode="out", weights=E(g)$weight)
gToCut
gToCut$weight
gToCut$weight
gToCut
E(gToCut)$weight
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_maskMean.R', echo=TRUE)
RC$residualGraph
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_maskMean.R', echo=TRUE)
RC$residualGraph
RC <- sw_cutting(gToCut, threshold = 0.04, invert = F)
RC$residualGraph
RC <- sw_cutting(gToCut, threshold = 0.03, invert = F)
RC$residualGraph
g_example <- read.graph("./example.gml", format="gml") # example graph for creating object to cut
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_maskMean.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/t_test/driver_maskMean.R', echo=TRUE)

source("./create_lists.R")
a = [1]
a = "a"
pathIn <- vector(length = 3)
pathIn
pathIn[1] <- "./../../../data/graphs_integration/borda_sw_004/Controls/"
pathIn[3] <- "./../../../data/graphs_integration/borda_sw_004/SLA3/"
pathOut[1] <- "./../../../data/graphs_integration/borda_sw_004/list_controls.RData"
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_create_lists.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_create_lists.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_create_lists.R', echo=TRUE)
read.graph("./../../../data/graphs_integration/borda_sw_004/SLA3/SLA2_altezza.graphml"   , format = "graphml")
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_create_lists.R', echo=TRUE)
pathOut
pathOut[1]
pathOut[2]
pathOut[3]
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_create_lists.R', echo=TRUE)
res
res[1]
g <- res[[1]]
g
library(igraph)
g <- res[[1]]
g
g
read.graph("./../../../data/graphs_integration/borda_sw_004/SLA3/SLA2_altezza.graphml"   , format = "graphml")
read.graph("./../../../data/graphs_integration/borda_sw_004/Controls/CTRL_amore.graphml"   , format = "graphml")
a[[1]] <- g
g <- read.graph("./../../../data/graphs_integration/borda_sw_004/Controls/CTRL_amore.graphml"   , format = "graphml")
a[[1]] <- g
a <- list()
c(a, g)
a[[1]] <- g
a
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_create_lists.R', echo=TRUE)
load(pathOut[1])
a <- load(pathOut[1])
a
?load
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_create_lists.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_create_lists.R', echo=TRUE)
path <- "./../../../data/graphs_integration/borda_sw_004/igraphs_controls.RData"
load(path)
res
RC
rC
igraph_contrls
igraph_controls
igraphs_controls
library(igraph)
igraphs_controls
igraphs_controls[[1]]
g <- igraphs_controls[[1]]
g
length(graphs)
length(igraphs_controls)
g$name
g$subject
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/rand_walk_weighted.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_PAR.R', echo=TRUE)
graphs
p_graphs <- "./../../../data/graphs_integration/borda_sw_004/igraphs_controls.RData"
load(p_graphs)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_PAR.R', echo=TRUE)
igraphs[[1:5]]
graphs[[1:5]]
graphs[[1]]
graphs[[1:2]]
graphs[[1:3]]
graphs[[1:3,]]
graphs
graphs[[1]]
a = c(1:4)
a
a(1:2)
graphs <- list(length = 2)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_PAR.R', echo=TRUE)
data
debugSource('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_controls_PAR.R', echo=TRUE)
debugSource('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_controls_PAR.R', echo=TRUE)
graph[1]
graph[[1]]
debugSource('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_controls_PAR.R', echo=TRUE)
graphs[[1]]
debugSource('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_controls_PAR.R', echo=TRUE)
myRandWalk(1)
v_visited
length(v_visted)
length(v_visited)
r_tmp
v_nvisited
toRtrn_nvisited <- mean(v_nvisited)
toRtrn_steps <- mean(v_steps)
toRtrn_nvisited
toRtrn_steps
data
debugSource('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_controls_PAR.R', echo=TRUE)
debugSource('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_controls_PAR.R', echo=TRUE)
v_nvisited
debugSource('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_controls_PAR.R', echo=TRUE)
debugSource('~/Tesi/project_integration_intersect_3groups/R/propagation/server/driver_controls_PAR.R', echo=TRUE)
v_nvisited
a = c(-1, 0, 2, -1, 3)
which(a < = 0)
which(a <= 0)
which(a < 0)
which(a < 0)
idx = which(a < 0)
a[idx] = 0
a
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_SLA2_PAR.R', echo=TRUE)
data
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_controls_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_controls_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_controls_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_controls_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_controls_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_controls_PAR.R', echo=TRUE)
data
data[[1]]
data[[1]]$f_edge
data[[1]]$v_times
length(daa)
length(data)
data[[1]]
data[[1]]$f_edge
data[[1]]$f_edge
data[[1]]$f_edge
f_edge <- NULL
for(i in 1:n_sbj){
f_edge <- f_edge + data[[i]]$f_edge
#   # matrix of times, row = subject, col = run of randomwalk
#   if (i == 1){
#     sbj_times <- as.matrix(t(v_times))
#
#   }
#   else{
#     sbj_times <- insertRow(sbj_times, i, v_times)
#   }
#
#   # matrix of orders, row = subject, col = run of randomwalk
#   if (i == 1){
#     sbj_order <- as.matrix(t(v_order))
#
#   }
#   else{
#     sbj_order <- insertRow(sbj_order, i, v_order)
#   }
#
#   # list, each element is a subject. For each subject there is a list of paths
#   # (a path for every run of randomwalk)
#   sbj_history[[i]] <- l_history
}
f_edge <- NULL
n_sbj <- length(data)
f_edge <- NULL
for(i in 1:n_sbj){
f_edge <- f_edge + data[[i]]$f_edge
#   # matrix of times, row = subject, col = run of randomwalk
#   if (i == 1){
#     sbj_times <- as.matrix(t(v_times))
#
#   }
#   else{
#     sbj_times <- insertRow(sbj_times, i, v_times)
#   }
#
#   # matrix of orders, row = subject, col = run of randomwalk
#   if (i == 1){
#     sbj_order <- as.matrix(t(v_order))
#
#   }
#   else{
#     sbj_order <- insertRow(sbj_order, i, v_order)
#   }
#
#   # list, each element is a subject. For each subject there is a list of paths
#   # (a path for every run of randomwalk)
#   sbj_history[[i]] <- l_history
}
f_edge
n_sbj <- length(data)
f_edge <- data[[1]]$f_edge
for(i in 1:n_sbj){
f_edge <- f_edge + data[[i]]$f_edge
#   # matrix of times, row = subject, col = run of randomwalk
#   if (i == 1){
#     sbj_times <- as.matrix(t(v_times))
#
#   }
#   else{
#     sbj_times <- insertRow(sbj_times, i, v_times)
#   }
#
#   # matrix of orders, row = subject, col = run of randomwalk
#   if (i == 1){
#     sbj_order <- as.matrix(t(v_order))
#
#   }
#   else{
#     sbj_order <- insertRow(sbj_order, i, v_order)
#   }
#
#   # list, each element is a subject. For each subject there is a list of paths
#   # (a path for every run of randomwalk)
#   sbj_history[[i]] <- l_history
}
f_edge
data[[1]]$v_times
data[[1]]$l_history
data[[1]]$v_times
data[[1]]$v_times
n_sbj <- length(data)
f_edge <- data[[1]]$f_edge
for(i in 1:n_sbj){
f_edge <- f_edge + data[[i]]$f_edge
# matrix of times, row = subject, col = run of randomwalk
if (i == 1){
sbj_times <- as.matrix(t(data[[i]]$v_times))
}
else{
sbj_times <- insertRow(sbj_times, i, data[[i]]$v_times)
}
#   # matrix of orders, row = subject, col = run of randomwalk
#   if (i == 1){
#     sbj_order <- as.matrix(t(v_order))
#
#   }
#   else{
#     sbj_order <- insertRow(sbj_order, i, v_order)
#   }
#
#   # list, each element is a subject. For each subject there is a list of paths
#   # (a path for every run of randomwalk)
#   sbj_history[[i]] <- l_history
}
sbj_times
data[[1]]$l_history
n_sbj <- length(data)
f_edge <- data[[1]]$f_edge
for(i in 1:n_sbj){
f_edge <- f_edge + data[[i]]$f_edge
# matrix of times, row = subject, col = run of randomwalk
if (i == 1){
sbj_times <- as.matrix(t(data[[i]]$v_times))
}
else{
sbj_times <- insertRow(sbj_times, i, data[[i]]$v_times)
}
# matrix of orders, row = subject, col = run of randomwalk
if (i == 1){
sbj_order <- as.matrix(t(data[[i]]$v_order))
}
else{
sbj_order <- insertRow(sbj_order, i, data[[i]]$v_order)
}
# list, each element is a subject. For each subject there is a list of paths
# (a path for every run of randomwalk)
sbj_history[[i]] <- data[[i]]$l_history
}
n_sbj <- length(data)
f_edge <- data[[1]]$f_edge
for(i in 1:n_sbj){
f_edge <- f_edge + data[[i]]$f_edge
# matrix of times, row = subject, col = run of randomwalk
if (i == 1){
sbj_times <- as.matrix(t(data[[i]]$v_times))
}
else{
sbj_times <- insertRow(sbj_times, i, data[[i]]$v_times)
}
# matrix of orders, row = subject, col = run of randomwalk
if (i == 1){
sbj_order <- as.matrix(t(data[[i]]$v_order))
}
else{
sbj_order <- insertRow(sbj_order, i, data[[i]]$v_order)
}
# list, each element is a subject. For each subject there is a list of paths
# (a path for every run of randomwalk)
sbj_history[[i]] <- data[[i]]l_history
}
for(i in 1:n_sbj){
f_edge <- f_edge + data[[i]]$f_edge
# matrix of times, row = subject, col = run of randomwalk
if (i == 1){
sbj_times <- as.matrix(t(data[[i]]$v_times))
}
else{
sbj_times <- insertRow(sbj_times, i, data[[i]]$v_times)
}
# matrix of orders, row = subject, col = run of randomwalk
if (i == 1){
sbj_order <- as.matrix(t(data[[i]]$v_order))
}
else{
sbj_order <- insertRow(sbj_order, i, data[[i]]$v_order)
}
# list, each element is a subject. For each subject there is a list of paths
# (a path for every run of randomwalk)
sbj_history[[i]] <- data[[i]]l_history
}
for(i in 1:n_sbj){
f_edge <- f_edge + data[[i]]$f_edge
# matrix of times, row = subject, col = run of randomwalk
if (i == 1){
sbj_times <- as.matrix(t(data[[i]]$v_times))
}
else{
sbj_times <- insertRow(sbj_times, i, data[[i]]$v_times)
}
# matrix of orders, row = subject, col = run of randomwalk
if (i == 1){
sbj_order <- as.matrix(t(data[[i]]$v_order))
}
else{
sbj_order <- insertRow(sbj_order, i, data[[i]]$v_order)
}
# list, each element is a subject. For each subject there is a list of paths
# (a path for every run of randomwalk)
sbj_history[[i]] <- data[[i]]l_history
}
n_sbj <- length(data)
sbj_history <- list()
f_edge <- data[[1]]$f_edge
for(i in 1:n_sbj){
f_edge <- f_edge + data[[i]]$f_edge
# matrix of times, row = subject, col = run of randomwalk
if (i == 1){
sbj_times <- as.matrix(t(data[[i]]$v_times))
}
else{
sbj_times <- insertRow(sbj_times, i, data[[i]]$v_times)
}
# matrix of orders, row = subject, col = run of randomwalk
if (i == 1){
sbj_order <- as.matrix(t(data[[i]]$v_order))
}
else{
sbj_order <- insertRow(sbj_order, i, data[[i]]$v_order)
}
# list, each element is a subject. For each subject there is a list of paths
# (a path for every run of randomwalk)
sbj_history[[i]] <- data[[i]]l_history
}
n_sbj <- length(data)
sbj_history <- list()
f_edge <- data[[1]]$f_edge
for(i in 1:n_sbj){
f_edge <- f_edge + data[[i]]$f_edge
# matrix of times, row = subject, col = run of randomwalk
if (i == 1){
sbj_times <- as.matrix(t(data[[i]]$v_times))
}
else{
sbj_times <- insertRow(sbj_times, i, data[[i]]$v_times)
}
# matrix of orders, row = subject, col = run of randomwalk
if (i == 1){
sbj_order <- as.matrix(t(data[[i]]$v_order))
}
else{
sbj_order <- insertRow(sbj_order, i, data[[i]]$v_order)
}
# list, each element is a subject. For each subject there is a list of paths
# (a path for every run of randomwalk)
sbj_history[[i]] <- data[[i]]$l_history
}
sbj_history
sbj_history[[1]]
sbj_history[[1]]
toRtrn <- list("f_edge" = f_edge, "sbj_history" = sbj_history,
"sbj_times" = sbj_times, "sbj_order" = sbj_order)
toRtrn
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_controls_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_controls_PAR.R', echo=TRUE)
load(file = "./toRtrnC.RData")
rm(list=ls())
load(file = "./toRtrnC.RData")
toRtrn
toRtrn$f_edge
toRtrn$sbj_history
length(toRtrn$sbj_history)
toRtrn$sbj_history[[1]]
length(toRtrn$sbj_history[[1]])
toRtrn$sbj_times
toRtrn$sbj_order
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_controls_PAR.R', echo=TRUE)
save(resCtrl, file = "toRtrnC.RData")
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_controls_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_all_PAR.R', echo=TRUE)
stopCluster(cl)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server2/driver_all_PAR.R', echo=TRUE)

pathOut.obj <- paste(path.base, "analysis_complete.RData", sep = "")
# ==== load data ===
res.prop <- list()
load(pathIn.ctrl)
res.prop[[1]] <- data.prop
load(pathIn.sla2)
res.prop[[2]] <- data.prop
load(pathIn.sla3)
res.prop[[3]] <- data.prop
# ===================== functions =========================
# calculate the mean of propagation
time_mean <- function(obj){
n.sbj <- dim(obj)[1]
mean.sbj <- vector(mode = "numeric", length = n.sbj)
for(i in 1:n.sbj){
mean.sbj[i] <- mean(obj[i,])
}
return(mean(mean.sbj))
}
# calculate k items with max frequency
topK_freq <- function(obj, k, exgraph){
maxfreq.idx <- vector(mode = "numeric", k)
maxfreq.value <- vector(mode = "numeric", k)
maxfreq.area_vs <- vector(mode = "logical", k)
maxfreq.area_vt <- vector(mode = "logical", k)
for(i in 1:k){
idx <- which.max(obj)
maxfreq.idx[i] <- idx
maxfreq.value[i] <- obj[idx]
obj[idx] <- 0
edge.v <- ends(exgraph, idx)
edge.names <- get.vertex.attribute(exgraph, name = "roiName", edge.v)
maxfreq.area_vs[i] <- edge.names[1]
maxfreq.area_vt[i] <- edge.names[2]
}
df <- data.frame(maxfreq.idx, maxfreq.value, maxfreq.area_vs, maxfreq.area_vt)
colnames(df) <- c("Index", "Value", "Area_From", "Area_To")
return(df)
}
# calculate the average path
average_walk <- function(obj, exgraph){
n.sbj <- length(obj)
l_path <- list()
s_path <- list()
si <- 1
li <- 1
for(i in 1:n.sbj){
c.sbj <- obj[[i]]
for(j in 1:length(c.sbj)){
s_path[[si]] <- calculate_order(unlist(c.sbj[[j]]))
si <- si + 1
}
bo <- Borda(s_path)
l_path[[li]] <- bo$TopK$mean
li <- li + 1
}
avg.walk.vertex <- Borda(l_path)$TopK$mean
avg.walk.name <-  vector(mode = "logical", length(avg.walk.vertex))
for(i in 1:length(avg.walk.vertex)){
avg.walk.name[i] <- get.vertex.attribute(exgraph, name = "roiName",
index = avg.walk.vertex[i])
}
df <- data.frame(avg.walk.vertex, avg.walk.name)
colnames(df) <- c("Vertex", "Area")
return(df)
}
# calculate exploration order
calculate_order <- function(path){
n <- length(path)
visited <- vector(mode = "numeric")
for(i in 1:n){
if(!(path[i] %in% visited)){
visited <- c(visited, path[i])
}
}
return(visited)
}
mean.groups <- vector(mode = "numeric", length = 3)
mean.groups[1] <- time_mean(res.prop[[1]]$sbj_times)
mean.groups[2] <- time_mean(res.prop[[2]]$sbj_times)
mean.groups[3] <- time_mean(res.prop[[3]]$sbj_times)
mean.groups
rm(list=ls())
library(igraph)
library(TopKLists)
# ==== definitions ====
path.base <- "./../../data/results/propagation/rand_walk_complete/borda_sw_004/server_fmri_complete_r1/"
pathIn.ctrl <- paste(path.base, "res_ctrl.RData", sep = "")
pathIn.sla2 <- paste(path.base, "res_sla2.RData", sep = "")
pathIn.sla3 <- paste(path.base, "res_sla3.RData", sep = "")
pathIn.ctrl <- "./server3/prop_ctrl_dti_r1.RData"
pathIn.sla2 <- "./server3/prop_sla2_dti_r1.RData"
pathIn.sla3 <- "./server3/prop_sla3_dti_r1.RData"
pathIn.graph_ex <- ("./../../data/results/borda_example_graph.graphml")
g <- read.graph(pathIn.graph_ex, format = "graphml")
pathOut.obj <- paste(path.base, "analysis_complete.RData", sep = "")
# ==== load data ===
res.prop <- list()
load(pathIn.ctrl)
res.prop[[1]] <- data.prop
load(pathIn.sla2)
res.prop[[2]] <- data.prop
load(pathIn.sla3)
res.prop[[3]] <- data.prop
# ===================== functions =========================
# calculate the mean of propagation
time_mean <- function(obj){
n.sbj <- dim(obj)[1]
mean.sbj <- vector(mode = "numeric", length = n.sbj)
for(i in 1:n.sbj){
mean.sbj[i] <- mean(obj[i,])
}
return(mean(mean.sbj))
}
# calculate k items with max frequency
topK_freq <- function(obj, k, exgraph){
maxfreq.idx <- vector(mode = "numeric", k)
maxfreq.value <- vector(mode = "numeric", k)
maxfreq.area_vs <- vector(mode = "logical", k)
maxfreq.area_vt <- vector(mode = "logical", k)
for(i in 1:k){
idx <- which.max(obj)
maxfreq.idx[i] <- idx
maxfreq.value[i] <- obj[idx]
obj[idx] <- 0
edge.v <- ends(exgraph, idx)
edge.names <- get.vertex.attribute(exgraph, name = "roiName", edge.v)
maxfreq.area_vs[i] <- edge.names[1]
maxfreq.area_vt[i] <- edge.names[2]
}
df <- data.frame(maxfreq.idx, maxfreq.value, maxfreq.area_vs, maxfreq.area_vt)
colnames(df) <- c("Index", "Value", "Area_From", "Area_To")
return(df)
}
# calculate the average path
average_walk <- function(obj, exgraph){
n.sbj <- length(obj)
l_path <- list()
s_path <- list()
si <- 1
li <- 1
for(i in 1:n.sbj){
c.sbj <- obj[[i]]
for(j in 1:length(c.sbj)){
s_path[[si]] <- calculate_order(unlist(c.sbj[[j]]))
si <- si + 1
}
bo <- Borda(s_path)
l_path[[li]] <- bo$TopK$mean
li <- li + 1
}
avg.walk.vertex <- Borda(l_path)$TopK$mean
avg.walk.name <-  vector(mode = "logical", length(avg.walk.vertex))
for(i in 1:length(avg.walk.vertex)){
avg.walk.name[i] <- get.vertex.attribute(exgraph, name = "roiName",
index = avg.walk.vertex[i])
}
df <- data.frame(avg.walk.vertex, avg.walk.name)
colnames(df) <- c("Vertex", "Area")
return(df)
}
# calculate exploration order
calculate_order <- function(path){
n <- length(path)
visited <- vector(mode = "numeric")
for(i in 1:n){
if(!(path[i] %in% visited)){
visited <- c(visited, path[i])
}
}
return(visited)
}
# ==== propagation time ====
mean.groups <- vector(mode = "numeric", length = 3)
mean.groups[1] <- time_mean(res.prop[[1]]$sbj_times)
mean.groups[2] <- time_mean(res.prop[[2]]$sbj_times)
mean.groups[3] <- time_mean(res.prop[[3]]$sbj_times)
mean.groups
avgwalk.groups <- list()
k <- 10
avgwalk.groups[[1]] <- average_walk(res.prop[[1]]$sbj_history, g)
avgwalk.groups[[2]] <- average_walk(res.prop[[2]]$sbj_history, g)
avgwalk.groups[[3]] <- average_walk(res.prop[[3]]$sbj_history, g)
df.avgwalk <- data.frame(avgwalk.groups[[1]]$Area,
avgwalk.groups[[2]]$Area,
avgwalk.groups[[3]]$Area)
colnames(df.avgwalk, c("Controls", "Sla2", "Sla3")
df.avgwalk <- data.frame(avgwalk.groups[[1]]$Area,
avgwalk.groups[[2]]$Area,
avgwalk.groups[[3]]$Area)
colnames(df.avgwalk, c("Controls", "Sla2", "Sla3"))
df.avgwalk <- data.frame(avgwalk.groups[[1]]$Area,
avgwalk.groups[[2]]$Area,
avgwalk.groups[[3]]$Area)
colnames(df.avgwalk, c("Controls", "Sla2", "Sla3"))
df.avgwalk <- data.frame(avgwalk.groups[[1]]$Area,
avgwalk.groups[[2]]$Area,
avgwalk.groups[[3]]$Area)
df.avgwalk <- data.frame(avgwalk.groups[[1]]$Area,
avgwalk.groups[[2]]$Area,
avgwalk.groups[[3]]$Area)
)
data.frame(avgwalk.groups[[1]]$Area,
avgwalk.groups[[2]]$Area,
avgwalk.groups[[3]]$Area)
df.avgwalk <- data.frame(avgwalk.groups[[1]]$Area,
avgwalk.groups[[2]]$Area,
avgwalk.groups[[3]]$Area)
df.avgwalk <- data.frame(avgwalk.groups[[1]]$Area,
avgwalk.groups[[2]]$Area,
avgwalk.groups[[3]]$Area)
df.avgwalk
df.avgwalk <- data.frame(avgwalk.groups[[1]]$Area,
avgwalk.groups[[2]]$Area,
avgwalk.groups[[3]]$Area)
df.avgwalk <- data.frame(avgwalk.groups[[1]]$Area,
avgwalk.groups[[2]]$Area,
avgwalk.groups[[3]]$Area)
colnames(df.avgwalk, c("Controls", "Sla2", "Sla3"))
df
df.avgwalk
colnames(df.avgwalk)
colnames(df.avgwalk, c("Controls", "Sla2", "Sla3"))
colnames <- (df.avgwalk, c("Controls", "Sla2", "Sla3"))
colnames(df.avgwalk) <- c("Controls", "Sla2", "Sla3"))
colnames(df.avgwalk) <- c("Controls", "Sla2", "Sla3")
df.avgwalk
save.image(file = pathOut.obj)
pathOut.obj <- "./analysis_complete.RData"
source('~/Tesi/project_integration_intersect_3groups/R/propagation/analysis_complete.R', echo=TRUE)
mean.groups
freq.ctrl
avgwalk.groups
avgwalk.groups
df.avgwalk
source('~/Tesi/project_integration_intersect_3groups/R/propagation/server3/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
load(pathOut.obj)
analysis.prop$time.mean
analysis.prop$freq.topK
analysis.prop$walks.avg
source('~/Tesi/project_integration_intersect_3groups/R/propagation/analysis_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/analysis_propdata.R', echo=TRUE)
rc <- res.prop[[1]]
rc
rc$sbj_history
rc$sbj_history[[ยน]]
rc$sbj_history[[1]]
length(obj)
length(rc)
length(rc)
rc$sbj_history
hrc <- rc$sbj_history[[1]]
hrc
length(hrc)
hrc <- rc$sbj_history
length(hrc)
hrc[[1]]
hrc[[1]]
which(hrc[[1]] == 1)
which(hrc[[1]] == 1)
hrc[[1]]
which(hrc[[1]][[1]] == 1)
rc
rc <- res.prop[[1]]
rc
rc <- res.prop[[1]]$sbj_history
rc
length(rc)
length(rc[[1]])
m <- matrix(90,90)
m
m <- matrix(nrow = 90, ncol = 90)
m
m <- matrix(nrow = 90, ncol = 90, data = 0)
m
library(miscTools)
?insertRow
time_matrix <- function(obj){
time.sbj <- vector(length = 90, mode = "numeric")
for(sbj in 1:length(obj)){
for(walk in 1:length(obj[[sbj]])){
cur <- obj[[sbj]][[walk]]
for (reg in 1:90){
idx <- which( cur == reg)
idx <- idx[1]
time.sbj[reg] <- idx
}
}
time.sbj <- time.sbj/length(obj[[sbj]])
if(sbj == 1){
M <- as.matrix(t(time.sbj))
}
else{
M <- insertRow(M, sbj, time.sbj)
}
}
}
time_matrix(res.prop[[1]]$sbj_history)
time_matrix <- function(obj){
time.sbj <- vector(length = 90, mode = "numeric")
for(sbj in 1:length(obj)){
for(walk in 1:length(obj[[sbj]])){
cur <- obj[[sbj]][[walk]]
for (reg in 1:90){
idx <- which( cur == reg)
idx <- idx[1]
time.sbj[reg] <- idx
}
}
time.sbj <- time.sbj/length(obj[[sbj]])
if(sbj == 1){
M <- as.matrix(t(time.sbj))
}
else{
M <- insertRow(M, sbj, time.sbj)
}
}
return(M)
}
time_matrix(res.prop[[1]]$sbj_history)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
colSums(x)
meanSums(x)
colMean(x)
colMeans(x)
x <- cbind(x1 = 3, x2 = c(4:1, 2:10))
x
colMeans(x)
colSums(x)
colMeans(x)
as.matrix(x)
a <- colMeans(x)
a[ยน]
a[1]
time_matrix <- function(obj){
time.sbj <- vector(length = 90, mode = "numeric")
for(sbj in 1:length(obj)){
for(walk in 1:length(obj[[sbj]])){
cur <- obj[[sbj]][[walk]]
for (reg in 1:90){
idx <- which( cur == reg)
idx <- idx[1]
time.sbj[reg] <- idx
}
}
time.sbj <- time.sbj/length(obj[[sbj]])
if(sbj == 1){
M <- as.matrix(t(time.sbj))
}
else{
M <- insertRow(M, sbj, time.sbj)
}
}
return(colMeans(M))
}
time_matrix(res.prop[[1]]$sbj_history)
library(igraph)
library(TopKLists)
#' Calculate the mean of propagation of a group of subjects
#' @param obj: object containing the times of propagation for subjects
#'              belonging at the same group
#' @return mean of propagation time of a groups of subjects
time_mean <- function(obj){
n.sbj <- dim(obj)[1]
mean.sbj <- vector(mode = "numeric", length = n.sbj)
for(i in 1:n.sbj){
mean.sbj[i] <- mean(obj[i,])
}
return(mean(mean.sbj))
}
#' Calculate k edges with max frequency
#' @param obj: object containing the frequency of edges of a group
#' @return data frame contaning a list of edges
topK_freq <- function(obj, k, exgraph){
maxfreq.idx <- vector(mode = "numeric", k)
maxfreq.value <- vector(mode = "numeric", k)
maxfreq.area_vs <- vector(mode = "logical", k)
maxfreq.area_vt <- vector(mode = "logical", k)
for(i in 1:k){
idx <- which.max(obj)
maxfreq.idx[i] <- idx
maxfreq.value[i] <- obj[idx]
obj[idx] <- 0
edge.v <- ends(exgraph, idx)
edge.names <- get.vertex.attribute(exgraph, name = "roiName", edge.v)
maxfreq.area_vs[i] <- edge.names[1]
maxfreq.area_vt[i] <- edge.names[2]
}
df <- data.frame(maxfreq.idx, maxfreq.value, maxfreq.area_vs, maxfreq.area_vt)
colnames(df) <- c("Index", "Value", "Area_From", "Area_To")
return(df)
}
#' Calculate the average walker path of a group of subjects
#' @param obj: object containing the walker paths of a group of subjects
#' @param exgraph: dataset graph example
average_walk <- function(obj, exgraph){
n.sbj <- length(obj)
l_path <- list()
s_path <- list()
si <- 1
li <- 1
for(i in 1:n.sbj){
c.sbj <- obj[[i]]
for(j in 1:length(c.sbj)){
s_path[[si]] <- calculate_order(unlist(c.sbj[[j]]))
si <- si + 1
}
bo <- Borda(s_path)
l_path[[li]] <- bo$TopK$mean
li <- li + 1
}
avg.walk.vertex <- Borda(l_path)$TopK$mean
avg.walk.name <-  vector(mode = "logical", length(avg.walk.vertex))
for(i in 1:length(avg.walk.vertex)){
avg.walk.name[i] <- get.vertex.attribute(exgraph, name = "roiName",
index = avg.walk.vertex[i])
}
df <- data.frame(avg.walk.vertex, avg.walk.name)
colnames(df) <- c("Vertex", "Area")
return(df)
}
#' Calculate exploration order
#' @param path: a walker path
#' @return a vector in which vertex are sorted by visit time
calculate_order <- function(path){
n <- length(path)
visited <- vector(mode = "numeric")
for(i in 1:n){
if(!(path[i] %in% visited)){
visited <- c(visited, path[i])
}
}
return(visited)
}
time_matrix <- function(obj){
time.sbj <- vector(length = 90, mode = "numeric")
for(sbj in 1:length(obj)){
for(walk in 1:length(obj[[sbj]])){
cur <- obj[[sbj]][[walk]]
for (reg in 1:90){
idx <- which( cur == reg)
idx <- idx[1]
time.sbj[reg] <- idx
}
}
time.sbj <- time.sbj/length(obj[[sbj]])
if(sbj == 1){
M <- as.matrix(t(time.sbj))
}
else{
M <- insertRow(M, sbj, time.sbj)
}
}
return(colMeans(M))
}
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/analysis_prop_func.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/analysis_prop_func.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
load(pathOut.obj)
analysis.prop
analysis.prop$time.regions
?round
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
load(pathOut.obj)
analysis.prop$time.regions
signif(1.128347132904321674821,digits=3)
fixed(1.128347132904321674821, digits=2)
fixed(1.128347132904321674821, digits=2)
formattable(1.128347132904321674821, digits = 2, format = "f")
library(formattable)
install.packages("formattable")
R.version()
R.Version()
(round(1.343535345, 1), nsmall = 1)
round(1.343535345, 1)
round(1.343535345, 2)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
load(pathOut.obj)
analysis.prop
analysis.prop$time.regions
update.packages()
.libPaths
.libPaths()
R.Version()
library(TopKLists)
library(igraph)
update.packages()
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
pathIn.ctrl <- "./random_walk/borda/fmri/prop_sla2_fmri_r1.RData"
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
load(pathOut.obj)
analysis.prop
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
load(pathOut.obj)
analysis.prop
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
load(pathOut.obj)
analysis.prop
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/driver_propdata.R', echo=TRUE)

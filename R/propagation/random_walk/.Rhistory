stopCluster(cl)
stopCluster(cl)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
slow_func <- function(X, FUN, ...) {
FUN <- match.fun(FUN)
if (!is.list(X))
X <- as.list(X)
rval <- vector("list", length(X))
for(i in seq(along = X))
rval[i] <- list(FUN(X[[i]], ...))
names(rval) <- names(X)          # keep `names' !
return(rval)
}
# Compiled versio
# Compiled versions
require(compiler)
slow_func_compiled <- cmpfun(slow_func)
fo <- function() for (i in 1:1000) slow_func(1:100, is.null)
fo_c <- function() for (i in 1:1000) slow_func_compiled(1:100, is.null)
system.time(fo())
system.time(fo_c())
fo <- function() for (i in 1:10000) slow_func(1:100, is.null)
fo_c <- function() for (i in 1:10000) slow_func_compiled(1:100, is.null)
system.time(fo())
system.time(fo_c())
system.time(fo())
system.time(fo_c())
fo_compiled <- cmpfun(fo)
system.time(fo_compiled()) # doing this, will not change the speed at all:
enableJIT(3)
system.time(fo())
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/analysis_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/analysis_propdata.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
stopCluster(cl)
stopCluster(cl)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
stopCluster(cl)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
path <- "./../../../data/graphs_integration/borda_sw_004/igraphs_SLA3.RData"
load(path)
igraphs_SLA3
g <- igraphs_SLA3[[1]]
g
is.connected(g)
rand_walk_weighted(g, weights = E(g)$fmri, seed = 68, maxiter = 1000)
rand_walk_weighted(g, weights = E(g)$fmri, seed = 68, maxiter = 4000)
rand_walk_weighted(g, weights = E(g)$dti, seed = 68, maxiter = 4000)
path <- "./../../../data/graphs_integration/sign_test/igraphs_SLA3.RData"
is.connected(g)
load(path)
g <- igraphs_SLA3[[1]]
g
is.connected(g)
rand_walk_weighted(g, weights = E(g)$dti, seed = 68, maxiter = 4000)
rand_walk_weighted(g, weights = E(g)$fmri, seed = 68, maxiter = 1000)
rand_walk_weighted(g, weights = E(g)$fmri, seed = 68, maxiter = 100)
rand_walk_weighted(g, weights = E(g)$fmri, seed = 68, maxiter = 200)
E(g)
E(g)$fmri
random_walk(g)
random_walk(g, start = 68, steps = 100)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
random_walk(g, start = 68, steps = 1000)
?random_walk
is.connected(g, "strong")
ug <- undirected_graph(g, )
ug <- undirected_graph(g)
ug
g
?undirected_graph
as.undirected(g, mode = "collapse")
g <- as.undirected(g, mode = "collapse")
is.connected(g)
is.connected(g, "strong")
rand_walk_weighted(g, weights = E(g)$fmri, seed = 68, maxiter = 200)
rand_walk_weighted(g, weights = E(g)$fmri, seed = 68, maxiter = 1000)
E(g)
g
g <- as.undirected(g, mode = "collapse", edge.attr.comb=list("fmri"))
g <- as.undirected(g, mode = "collapse", edge.attr.comb=list("fmri", "dti"))
simplify(g, edge.attr.comb="mean")
g
g
simplify(g, edge.attr.comb="mean")
g
g <- as.undirected(g, mode = "collapse")
ug <- simplify(ug, edge.attr.comb="mean")
ug <- simplify(g, edge.attr.comb="mean")
g
g <- igraphs_SLA3[[1]]
g
sg <- simplify(g, edge.attr.comb="mean")
sg
ug <- as.undirected(sg, mode = "collapse")
ug
ug <- as.undirected(g, mode = "collapse", edge.attr.comb = "mean")
ug
g
ug <- as.undirected(g, mode = "collapse", edge.attr.comb = "sum")
ug
ug <- as.undirected(g, mode = "collapse", edge.attr.comb = "mean")
ug
g1 <- set.edge.attribute(g, index = E(g), name = "prova", value = abs(E(g)$fmri))
g1
ug <- as.undirected(g1, mode = "collapse", edge.attr.comb = "mean")
ug
g1
g1
ug <- as.undirected(g1, mode = "collapse", edge.attr.comb = "mean")
E(g)$fmru
E(g)$fmri
E(g1)$fmri
E(ug)$fmri
E(g)
E(ug)
g1
E(g1)$fmri
E(g1)$prova
E(ug)$prova
ug <- as.undirected(g1, mode = "collapse", edge.attr.comb = prova = "mean")
ug <- as.undirected(g1, mode = "collapse", edge.attr.comb = list(prova = "mean")
)
ug
ug
g
ug <- as.undirected(g1, mode = "collapse", edge.attr.comb = list(prova = "mean", "ignore")
)
ug
g1
g1
E(g1)$prova
ug <- as.undirected(g1, mode = "collapse", edge.attr.comb = list(prova = "mean", "ignore")
)
ug <- as.undirected(g1, mode = "collapse", edge.attr.comb = list(prova = "mean", "ignore"))
ug
ug <- as.undirected(g1, mode = "each", edge.attr.comb = list(prova = "mean", "ignore"))
ug
ug <- as.undirected(g, mode = "each", edge.attr.comb = list(prova = "mean", "ignore"))
ug
is.connected(ug)
is.connected(ug, "strong")
source("./rw_propagation_un.R", chdir = T)
source("./rw_propagation_un.R", chdir = T)
driver_exp(cl, seed, times, maxiter, pathIn.sla3, "s3", pathOutS3)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
g
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
load(pathIn.sla3)
graph <- igraphs_SLA3[[1]]
w <- abs(E(graph)$fmri)
ug <- set.edge.attribute(graph, name = "tmp_att", index = E(graph), value = w)
ug <- as.undirected(ug, mode = "each", edge.attr.comb = list(tmp_att= "mean", "ignore"))
w <- E(graph)$tmp_att
graph <- ug
graph
pathIn.sla3 <- "./../../../data/graphs_integration/sign_test/igraphs_SLA3.RData"
load(pathIn.sla3)
graph <- igraphs_SLA3[[1]]
w <- E(graph)$tmp_att
ug <- set.edge.attribute(graph, name = "tmp_att", index = E(graph), value = w)
ug <- as.undirected(ug, mode = "each", edge.attr.comb = list(tmp_att= "mean", "ignore"))
w <- E(graph)$tmp_att
ug
graph <- ug
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
load(pathIn.sla3)
pathIn.sla3 <- "./../../../data/graphs_integration/sign_test/igraphs_SLA3.RData"
load(pathIn.sla3)
pathIn.sla3 <- "./../../../data/graphs_integration/sign_test/igraphs_SLA3.RData"
load(pathIn.sla3)
graph <- igraphs_SLA3[[1]]
pathIn.sla3 <- "./../../../data/graphs_integration/sign_test/igraphs_SLA3.RData"
load(pathIn.sla3)
graph <- igraphs_SLA3[[1]]
ug <- set.edge.attribute(graph, name = "tmp_att", index = E(graph), value = w)
ug <- as.undirected(ug, mode = "each", edge.attr.comb = list(tmp_att= "mean", "ignore"))
w <- E(graph)$tmp_att
graph <- ug
w <- abs(E(graph)$fmri)
ug <- set.edge.attribute(graph, name = "tmp_att", index = E(graph), value = w)
ug <- as.undirected(ug, mode = "each", edge.attr.comb = list(tmp_att= "mean", "ignore"))
w <- E(graph)$tmp_att
graph <- ug
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation_un.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation_un.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation_un.R', echo=TRUE)
driver_exp(cl, 1, 1, 1000, pathIn.sla3, "s3", "prova.RData")
debugSource('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation_un.R', echo=TRUE)
debugSource('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation_un.R', echo=TRUE)
debugSource('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation_un.R', echo=TRUE)
debugSource('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation_un.R', echo=TRUE)
rand_walk_weighted(graph, E(graph)$tmp_att, 1, maxiter)
rand_walk_weighted(graph, E(graph)$tmp_att, 1, 100)
graph
pathIn.sla3 <- "./../../../data/graphs_integration/sign_test/igraphs_SLA3.RData"
load(pathIn.sla3)
graph <- igraphs_SLA3[[1]]
w <- abs(E(graph)$fmri)
ug <- set.edge.attribute(graph, name = "tmp_att", index = E(graph), value = w)
ug <- as.undirected(ug, mode = "each", edge.attr.comb = list(tmp_att= "mean", "ignore"))
w <- E(graph)$tmp_att
graph <- ug
rand_walk_weighted(graph, w, 1, 100)
rand_walk_weighted(graph, w, 1, 100)
w
ug <- set.edge.attribute(graph, name = "tmp_att", index = E(graph), value = w)
ug <- as.undirected(ug, mode = "each", edge.attr.comb = list(tmp_att= "mean", "ignore"))
w <- E(graph)$tmp_att
graph <- ug
w
pathIn.sla3 <- "./../../../data/graphs_integration/sign_test/igraphs_SLA3.RData"
load(pathIn.sla3)
graph <- igraphs_SLA3[[1]]
w <- abs(E(graph)$fmri)
ug <- set.edge.attribute(graph, name = "tmp_att", index = E(graph), value = w)
ug <- as.undirected(ug, mode = "each", edge.attr.comb = list(tmp_att= "mean", "ignore"))
w <- E(graph)$tmp_att
graph <- ug
w
pathIn.sla3 <- "./../../../data/graphs_integration/sign_test/igraphs_SLA3.RData"
load(pathIn.sla3)
graph <- igraphs_SLA3[[1]]
w <- abs(E(graph)$fmri)
ug <- set.edge.attribute(graph, name = "tmp_att", index = E(graph), value = w)
ug <- as.undirected(ug, mode = "each", edge.attr.comb = list(tmp_att= "mean", "ignore"))
w <- E(graph)$tmp_att
graph <- ug
w
w <- E(graph)$tmp_att
w
graph <- ug
w
pathIn.sla3 <- "./../../../data/graphs_integration/sign_test/igraphs_SLA3.RData"
load(pathIn.sla3)
graph <- igraphs_SLA3[[1]]
w <- abs(E(graph)$fmri)
ug <- set.edge.attribute(graph, name = "tmp_att", index = E(graph), value = w)
ug <- as.undirected(ug, mode = "each", edge.attr.comb = list(tmp_att= "mean", "ignore"))
w <- E(graph)$tmp_att
graph <- ug
w
w
E(graph)$tmp_att
pathIn.sla3 <- "./../../../data/graphs_integration/sign_test/igraphs_SLA3.RData"
load(pathIn.sla3)
graph <- igraphs_SLA3[[1]]
w <- abs(E(graph)$fmri)
ug <- set.edge.attribute(graph, name = "tmp_att", index = E(graph), value = w)
ug <- as.undirected(ug, mode = "each", edge.attr.comb = list(tmp_att= "mean", "ignore"))
w <- E(graph)$tmp_att
graph <- ug
rand_walk_weighted(graph, E(graph)$tmp_att, 1, 100)
E(graph)$tmp_att
pathIn.sla3 <- "./../../../data/graphs_integration/sign_test/igraphs_SLA3.RData"
load(pathIn.sla3)
graph <- igraphs_SLA3[[1]]
w <- abs(E(graph)$fmri)
ug <- set.edge.attribute(graph, name = "tmp_att", index = E(graph), value = w)
ug <- as.undirected(ug, mode = "each", edge.attr.comb = list(tmp_att= "mean", "ignore"))
graph <- ug
w <- E(graph)$tmp_att
rand_walk_weighted(graph, E(graph)$tmp_att, 1, 100)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR_un.R', echo=TRUE)
c(1,2,3)
a <- c(1,2,3)
b <- c(2,3,4)
a*b
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
library("parallel")
library(igraph)
library(miscTools)
rand_walk_weighted <- function(graph, weights, seed, maxiter = 3000){
v_visited <- vector()   # visited vertices
v_history <- vector()   # sequence of visited vertices
f_edge <- rep(0, length = ecount(graph))
nv <- vcount(graph)
walker <- seed
# check if length of weights is ok
if(length(weights) != ecount(graph)){
return(-1)
}
# set attribute
graph <- set.edge.attribute(graph, name = "tmp", index = E(graph), weights)
cnt <- 0
while( (length(v_visited) < 90) && (cnt <= maxiter) ){
cnt <- cnt + 1
# update history
v_history <- c(v_history, walker)
# check if the walker is a vertex which has never visited before
if(!(walker %in% v_visited)){
v_visited <- c(v_visited, walker)
}
# get neighbors
neighs <- incident(graph, mode = "out", v = walker)
n_neighs <- length(neighs)
# if there are no neighbors stop it
if(n_neighs < 1){
cnt = maxiter
}
else{
# get neighbors weights
w_neighs <- vector(mode = "numeric", length = n_neighs)
for(i in 1:n_neighs){
w_neighs[i] <- get.edge.attribute(graph, name = "tmp", neighs[1])
}
# turn neighbors weights in probability (their sum is equal to 1)
p_neighs <- w_neighs/(sum(w_neighs))
# choose where the walker will go at the next step
r <- runif(1)
idx_next <- sum(r >= cumsum(c(0, p_neighs)))
# get the endpoints of the choosen edge
e_next <- ends(graph, neighs[idx_next])
walker <- e_next[2]
#update frequency
idx_edge <- get.edge.ids(graph, c(e_next[1],e_next[2]))
f_edge[idx_edge] <- f_edge[idx_edge] + 1
} # end else
} # end while
toRtrn <- list("v_order" = v_visited,
"v_history" = v_history,
"f_edge" = f_edge
)
} # end function
myRandWalk <- function(idx, graphs, seed, times, maxiter = 4000){
graph <- graphs[[idx]]
f_edge <- rep(0, length = ecount(graph))
# ===== Here choose weights =====
w.fmri <- abs(E(graph)$fmri)
w.dti <- E(graph)$dti
w <- w.fmri * w.dti
# run random walk
v_times <- vector(mode = "numeric", length = times)
v_order <- vector(mode = "numeric", length = times)
l_history <- list()
for (t in 1:times){
print(t)
r_tmp <- rand_walk_weighted(graph, w, seed, maxiter)
# lengths of times and orders
v_times[t] <- length(r_tmp$v_history)
v_order[t] <- length(r_tmp$v_order)
# history path
l_history[[t]] <- r_tmp$v_history
# frequency
f_edge <- f_edge + r_tmp$f_edge
}
toRtrn <- list("f_edge" = f_edge, "v_times" = v_times,
"v_order" = v_order, "l_history" = l_history)
}
driver_exp <- function(cl, seed, times, maxiter, pathIn, group, pathOut){
load(pathIn)
res.name <- gsub(".RData", "", pathOut)
if(group == "c"){
graphs <- igraphs_controls
}
else if(group == "s2"){
graphs <- igraphs_SLA2
}
else if(group == "s3"){
graphs <- igraphs_SLA3
}
ng <- 1:length(graphs)
#   cl <- makeCluster(nc)
clusterEvalQ(cl, {library(igraph)})
clusterEvalQ(cl, {library(miscTools)})
clusterExport(cl, ls(), envir=environment())
clusterExport(cl, list("myRandWalk", "rand_walk_weighted"))
data <- clusterApply(cl, ng, myRandWalk, graphs, seed, times, maxiter)
#   stopCluster(cl)
n_sbj <- length(data)
sbj_history <- list()
f_edge <- data[[1]]$f_edge
for(i in 1:n_sbj){
f_edge <- f_edge + data[[i]]$f_edge
# matrix of times, row = subject, col = run of randomwalk
if (i == 1){
sbj_times <- as.matrix(t(data[[i]]$v_times))
}
else{
sbj_times <- insertRow(sbj_times, i, data[[i]]$v_times)
}
# matrix of orders, row = subject, col = run of randomwalk
if (i == 1){
sbj_order <- as.matrix(t(data[[i]]$v_order))
}
else{
sbj_order <- insertRow(sbj_order, i, data[[i]]$v_order)
}
# list, each element is a subject. For each subject there is a list of paths
# (a path for every run of randomwalk)
sbj_history[[i]] <- data[[i]]$l_history
}
data.prop <- list("info" = res.name, "f_edge" = f_edge, "sbj_history" = sbj_history,
"sbj_times" = sbj_times, "sbj_order" = sbj_order)
save(data.prop, file = pathOut)
}
path <- "./../../data/graphs_integration/t_test/Controls/CTRL_amore.graphml"
g <- read.graph(path, format = "graphml")
w  <- abs(E(graph)$fmri
rand_walk_weighted(g, w, 1)
r_tmp <- rand_walk_weighted(g, w, 1)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
g <- set.vertex.attribute(g, name = "n_att", index = E(g), value = w)
ug <- as.undirected(graph, mode = "collapse", edge.attr.comb = list(n_att="mean", "ignore")
)
ug <- as.undirected(g, mode = "collapse", edge.attr.comb = list(n_att="mean", "ignore"))
r_tmp <- rand_walk_weighted(g, w, 1)
is.connected(ug. "strong")
is.connected(ug. "strong")
is.connected(ug, "strong")
source('~/.active-rstudio-document', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/check_connectivity.R', echo=TRUE)
check_conn_dir("./../../../data/graphs_integration/t_test/Controls/")
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/check_connectivity.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/check_connectivity.R', echo=TRUE)
check_conn_dir("./../../../data/graphs_integration/t_test/SLA2/")
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/check_connectivity.R', echo=TRUE)
rm(list = ls())
require(compiler)
enableJIT(0)
source("./rw_propagation.R", chdir = T)
# ================================ Globals  ====================================
pathIn.ctrl <- "./../../../data/graphs_integration/t_test/igraphs_controls.RData"
pathIn.sla2 <- "./../../../data/graphs_integration/t_test/igraphs_SLA2.RData"
pathIn.sla3 <- "./../../../data/graphs_integration/t_test/igraphs_SLA3.RData"
# ================================ Region 1  ===================================
times <- 50
seed <- 1
maxiter <- 4000
nc <- 1
pathOutC <- "prop_ctrl_fmri_r1.RData"
pathOutS2 <- "prop_sla2_fmri_r1.RData"
pathOutS3 <- "prop_sla3_fmri_r1.RData"
time.start <- proc.time()
cl <- makeCluster(nc)
driver_exp(cl, seed, times, maxiter, pathIn.ctrl, "c", pathOutC)
driver_exp(cl, seed, times, maxiter, pathIn.sla2, "s2", pathOutS2)
driver_exp(cl, seed, times, maxiter, pathIn.sla3, "s3", pathOutS3)
stopCluster(cl)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
path <- "./../../../data/graphs_integration/t_test/Controls/CTRL_amore.graphml"
g <- read.graph(path, format = "graphml")
g <- set.edge.attribute(g, name = "n_att", index = E(g), value = w)
w  <- abs(E(g)$fmri)
g <- set.edge.attribute(g, name = "n_att", index = E(g), value = w)
ug <- as.undirected(g, mode = "collapse", edge.attr.comb = list(n_att="mean", "ignore"))
ug
E(g)$n_att
r_tmp <- rand_walk_weighted(ug, w, 1)
r_tmp
is.connected(ug, "strong")
r_tmp
r_tmp <- rand_walk_weighted(ug, w, 1)
rand_walk_weighted(ug, w, 1)
ug
ecount(ug)
weights
w
w  <- abs(E(g)$n_att)
w
w  <- abs(E(ug)$n_att)
w
source('~/.active-rstudio-document', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/driver_all_PAR.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
source('~/Tesi/project_integration_intersect_3groups/R/propagation/random_walk/rw_propagation.R', echo=TRUE)
